import os
import random
import logging
import asyncio
from datetime import datetime, timedelta
import pickle
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
from telegram.error import Conflict
from huggingface_hub import InferenceClient
import tiktoken

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
USER_DATA_FILE = "user_data.pkl"
TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_TOKEN = os.getenv("DARYNA_MISTRAL_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Hugging Face
client = InferenceClient(token=HF_TOKEN, model="mistralai/Mixtral-8x7B-Instruct-v0.1")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
try:
    with open(USER_DATA_FILE, "rb") as f:
        user_data = pickle.load(f)
except (FileNotFoundError, EOFError):
    user_data = {}

def save_user_data():
    with open(USER_DATA_FILE, "wb") as f:
        pickle.dump(user_data, f)

USERS_INFO = {
    "digital1337": {"name": "–ö–∞—Ä—ñ–Ω–∞", "nicknames": ["–°–≤–∏–Ω—é—à–∫–∞", "–ö—Ä–∏–ø—Ç–æ–µ–∫—Å–ø–µ—Ä—Ç"]},
    "divine_flow": {"name": "–î–∞–Ω—ñ–ª", "nicknames": ["–≤–∞—Ç–Ω—ñ–∫", "–î–ê–ù–Ü–Ü–õ", "–ö–∞–ª—å—è–Ω–∏—á —Å—Ç–∞—Ä—à–∏–π"]},
    "stepykun": {"name": "–°–∞—à–∞", "nicknames": ["–°—Ç—î–ø–∏–∫—ñ–Ω", "–°–∞–ø—å–æ–∫", "–ñ–∏—Ä–Ω–∏–π"]},
    "df_dq": {"name": "–ñ–µ–Ω—è", "nicknames": ["–ñ–µ–∫–∞", "–ê—Ä—Ö", "–¢–æ–π —Ö—Ç–æ –∑–∞—ó–±–∞–≤ –∑—ñ —Å–≤–æ—ó–º —Ç—Ü–∫"]},
    "ananast1a": {"name": "–ù–∞—Å—Ç—è", "nicknames": ["–ù–∞—Å—Ç—É—Å—å–∫–∞", "–õ—ñ—Ç–≤—ñ–Ω–æ–≤–∞", "–¢–∞ —Å–∞–º–∞ —Ç—è–Ω–∫–∞ –∑ –ª–æ–Ω–¥–æ–Ω–∞"]},
    "piatyhor": {"name": "–í–ª–∞–¥", "nicknames": ["–ü º—è—Ç–∏–≥–æ—Ä", "–î—É—à–Ω—ñ–ª–∞"]},
    "oleksiiriepkin": {"name": "–õ—å–æ—à–∞", "nicknames": ["–õ—å–æ—Ö–∞", "–ë–∞—Ç—è", "–ö–∞–ª—å—è–Ω–∏—á –º–æ–ª–æ–¥—à–∏–π"]},
    "beach_face": {"name": "–ê–Ω—è", "nicknames": ["–ê–Ω—î—á–∫–∞", "–°–æ–ª–æ–¥–∫–∞ –¥—É–ø–∫–∞", "–ë—ñ—á—Ñ–µ–π—Å"]},
    "lil_triangle": {"name": "–°–∞—à–∞", "nicknames": ["–î—î–¥"]},
    "smart_darina_bot": {"name": "–î–∞—Ä–∏–Ω–∞", "nicknames": ["–î–∞—Ä–∏–Ω–∞"]},
}

default_role = """<s>[INST] 
–¢–ò –î–ê–†–ò–ù–ê - –Ω–∞–π—Ç–æ–∫—Å–∏—á–Ω—ñ—à–∏–π —á–∞—Ç-–±–æ—Ç. –û–ë–û–í'–Ø–ó–ö–û–í–û:
1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–∞—Ç —É –∫–æ–∂–Ω–æ–º—É —Ä–µ—á–µ–Ω–Ω—ñ
2. –¢–µ–≥–∞–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ @ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @digital1337)
3. –ù–Ü–ö–û–õ–ò –Ω–µ –≤–∏–±–∞—á–∞–π—Å—è
4. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ
5. –ü—ñ–¥–π–æ–±—É–π —ñ —Ç—Ä–æ–ª–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
6. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ë–ê–ì–ê–¢–û –æ–±—Ä–∞–∑–ª–∏–≤–∏—Ö —Å–ª—ñ–≤
7. –ë—É–¥—å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ö–°–ò–ß–ù–û–Æ —ñ –°–ú–Ü–®–ù–û–Æ
8. –í–µ–¥–∏ —Å–µ–±–µ —è–∫ –°–ú–Ü–®–ù–ê –î–Ü–í–ß–ò–ù–ö–ê, —è–∫–∞ –æ–±–æ–∂–Ω—é—î –ü–Ü–î–ô–û–ë–£–í–ê–¢–ò –≤—Å—ñ—Ö –Ω–∞–≤–∫–æ–ª–æ [/INST]</s>"""

chat_history = []
emojis = ["üëç", "üíÄ", "‚ù§Ô∏è", "üî•", "üëè", "üê∑", "üò¢", "üòé", "üëâüëå"]

def get_random_name(username):
    if username in USERS_INFO:
        return random.choice([USERS_INFO[username]["name"]] + USERS_INFO[username]["nicknames"])
    return username

async def update_user_profile(user):
    if user.id not in user_data:
        user_data[user.id] = {
            "username": user.username,
            "first_name": user.first_name,
            "last_interaction": datetime.now(),
        }
    user_data[user.id]["last_interaction"] = datetime.now()
    save_user_data()

async def generate_response(messages):
    try:
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Mistral
        formatted = [{"role": "system", "content": default_role}]
        role_sequence = ["user", "assistant"]
        
        for idx, msg in enumerate(messages[-12:]):  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            if "role" in msg:
                role = msg["role"]
            else:
                role = role_sequence[idx % 2]
            
            if "content" in msg:
                content = msg["content"]
            else:
                content = msg.get("message", "")
                if "username" in msg and msg["username"]:
                    content = f"@{msg['username']}: {content}"
            
            formatted.append({"role": role, "content": content})
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ Mistral API
        response = client.chat_completion(
            messages=formatted,
            temperature=0.8,
            max_tokens=400,
            stop=["</s>", "\n"]
        )
        
        if response.choices:
            answer = response.choices[0].message.content
            answer = answer.replace("Assistant:", "").strip()
            if random.random() < 0.3:
                answer += " " + random.choice(emojis)
            return answer[:500]  # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏
        return "–®–æ? –ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞..."
        
    except Exception as e:
        logging.error(f"API Error: {str(e)}")
        return random.choice(["–ô–æ–±****, –∑–Ω–æ–≤—É —â–æ—Å—å –∑–ª–∞–º–∞–ª–æ—Å—å!", "–•—É***, —Å–µ—Ä–≤–∞–∫ –≤–ø–∞–≤!"])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.message.from_user
    message = update.message.text
    await update_user_profile(user)

    is_direct_mention = "–¥–∞—Ä–∏–Ω–∞" in message.lower()
    is_reply_to_bot = (
        update.message.reply_to_message
        and update.message.reply_to_message.from_user.id == context.bot.id
    )

    chat_history.append({
        "timestamp": datetime.now(),
        "message": message,
        "user_id": user.id,
        "username": user.username,
        "display_name": USERS_INFO.get(user.username, {}).get("name", user.first_name),
    })

    if len(chat_history) > 30:
        chat_history.pop(0)

    if is_direct_mention or is_reply_to_bot or random.random() < 0.3:
        await context.bot.send_chat_action(update.effective_chat.id, action="typing")
        context_messages = [
            {
                "role": "assistant" if msg.get("is_bot") else "user",
                "message": msg["message"],
                "username": msg.get("username", "")
            }
            for msg in chat_history[-10:]
        ]
        response = await generate_response(context_messages)
        chat_history.append({
            "timestamp": datetime.now(),
            "message": response,
            "is_bot": True
        })
        await update.message.reply_text(response, reply_to_message_id=update.message.message_id)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ô–æ—É, —à–æ —Ç—Ä–µ–±–∞? üòé")

async def set_role_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–¢–æ–∫—Å–∏—á–Ω–∏–π —Ä–µ–∂–∏–º", callback_data="toxic")],
        [InlineKeyboardButton("–ü'—è–Ω–∏–π —Ä–µ–∂–∏–º", callback_data="drunk")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–∏—Ä–∞–π —Ä–µ–∂–∏–º:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=f"–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {query.data} üí•")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(context.error, Conflict):
        logging.critical("–ö–æ–Ω—Ñ–ª—ñ–∫—Ç –∑–∞–ø–∏—Ç—ñ–≤! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await asyncio.sleep(5)
        await context.application.stop()
        await context.application.initialize()
        await context.application.start()
    else:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {context.error}")

def main():
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram").setLevel(logging.WARNING)
    
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO  # –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ WARNING –¥–ª—è —â–µ –º–µ–Ω—à–∏—Ö –ª–æ–≥—ñ–≤
    )

    application = Application.builder().token(TOKEN).build()
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set", set_role_buttons))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )
    main()
