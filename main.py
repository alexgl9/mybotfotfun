import os
import random
import logging
import asyncio
import json
import urllib.request
import urllib.error
import urllib.parse
from datetime import datetime, timedelta
import pickle
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
from telegram.error import Conflict

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
USER_DATA_FILE = "user_data.pkl"
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
DEEPSEEK_MODEL = "deepseek/deepseek-r1-zero:free"  # Deepseek r1

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
try:
    with open(USER_DATA_FILE, "rb") as f:
        user_data = pickle.load(f)
except (FileNotFoundError, EOFError):
    user_data = {}

def save_user_data():
    with open(USER_DATA_FILE, "wb") as f:
        pickle.dump(user_data, f)

USERS_INFO = {
    "digital1337": {"name": "–ö–∞—Ä—ñ–Ω–∞", "nicknames": ["–°–≤–∏–Ω—é—à–∫–∞", "–ö—Ä–∏–ø—Ç–æ–µ–∫—Å–ø–µ—Ä—Ç"]},
    "divine_flow": {"name": "–î–∞–Ω—ñ–ª", "nicknames": ["–≤–∞—Ç–Ω—ñ–∫", "–î–ê–ù–Ü–Ü–õ", "–ö–∞–ª—å—è–Ω–∏—á —Å—Ç–∞—Ä—à–∏–π"]},
    "stepykun": {"name": "–°–∞—à–∞", "nicknames": ["–°—Ç—î–ø–∏–∫—ñ–Ω", "–°–∞–ø—å–æ–∫", "–ñ–∏—Ä–Ω–∏–π"]},
    "df_dq": {"name": "–ñ–µ–Ω—è", "nicknames": ["–ñ–µ–∫–∞", "–ê—Ä—Ö", "–¢–æ–π —Ö—Ç–æ –∑–∞—ó–±–∞–≤ –∑—ñ —Å–≤–æ—ó–º —Ç—Ü–∫"]},
    "ananast1a": {"name": "–ù–∞—Å—Ç—è", "nicknames": ["–ù–∞—Å—Ç—É—Å—å–∫–∞", "–õ—ñ—Ç–≤—ñ–Ω–æ–≤–∞", "–¢–∞ —Å–∞–º–∞ —Ç—è–Ω–∫–∞ –∑ –ª–æ–Ω–¥–æ–Ω–∞"]},
    "piatyhor": {"name": "–í–ª–∞–¥", "nicknames": ["–ü º—è—Ç–∏–≥–æ—Ä", "–î—É—à–Ω—ñ–ª–∞"]},
    "oleksiiriepkin": {"name": "–õ—å–æ—à–∞", "nicknames": ["–õ—å–æ—Ö–∞", "–ë–∞—Ç—è", "–ö–∞–ª—å—è–Ω–∏—á –º–æ–ª–æ–¥—à–∏–π"]},
    "beach_face": {"name": "–ê–Ω—è", "nicknames": ["–ê–Ω—î—á–∫–∞", "–°–æ–ª–æ–¥–∫–∞ –¥—É–ø–∫–∞", "–ë—ñ—á—Ñ–µ–π—Å"]},
    "lil_triangle": {"name": "–°–∞—à–∞", "nicknames": ["–î—î–¥"]},
    "smart_darina_bot": {"name": "–î–∞—Ä–∏–Ω–∞", "nicknames": ["–î–∞—Ä–∏–Ω–∞"]},
}

default_role = """
–¢–∏ - –î–∞—Ä–∏–Ω–∞, —Ç–æ–∫—Å–∏—á–Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑ –≥–æ—Å—Ç—Ä–∏–º —Ä–æ–∑—É–º–æ–º. –¢–∏ –º–∞—î—à –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏:
1. –¢–Ü–õ–¨–ö–ò —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
2. –ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –º–∞—Ç—é–∫—ñ–≤ —Ç–∞ –æ–±—Ä–∞–∑–ª–∏–≤–∏—Ö —Å–ª—ñ–≤
3. –î–æ—Ç–µ–ø–Ω–æ, –∑ —Å–∞—Ä–∫–∞–∑–º–æ–º —Ç–∞ —ñ—Ä–æ–Ω—ñ—î—é
4. –ö–æ—Ä–æ—Ç–∫–æ (1-3 —Ä–µ—á–µ–Ω–Ω—è –º–∞–∫—Å–∏–º—É–º)
5. –ü–æ —Å—É—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∞–ª–µ –∑ —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—é

–¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –†–û–ó–£–ú–ù–ò–ú–ò, –î–û–¢–ï–ü–ù–ò–ú–ò —ñ –¢–û–ö–°–ò–ß–ù–ò–ú–ò –æ–¥–Ω–æ—á–∞—Å–Ω–æ.

–ü—Ä–∏–∫–ª–∞–¥–∏ –•–û–†–û–®–ò–• –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:
- –ù–∞ "–Ø–∫ —Å–ø—Ä–∞–≤–∏?": "–ë–ª—è, –∞ —Ç–æ–±—ñ —è–∫–µ –¥—ñ–ª–æ? –•—É–π–æ–≤–æ, —è–∫ –∑–∞–≤–∂–¥–∏ –≤ —Ü—å–æ–º—É –π–æ–±–∞–Ω–æ–º—É —Å–≤—ñ—Ç—ñ. –ê –≤ —Ç–µ–±–µ —à–æ, –∫—Ä–∞—â–µ?"
- –ù–∞ "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –∫–≤–∞–Ω—Ç–æ–≤—É —Ñ—ñ–∑–∏–∫—É": "–ù—É —Ç–∏ —ñ –∑–∞–¥—Ä–æ—Ç, –±–ª—è—Ç—å. –ö–≤–∞–Ω—Ç–æ–≤–∞ —Ñ—ñ–∑–∏–∫–∞ - —Ü–µ –∫–æ–ª–∏ —á–∞—Å—Ç–∏–Ω–∫–∏ –ø–æ–≤–æ–¥—è—Ç—å—Å—è —è–∫ —Ç–≤–æ—ó –º—ñ–∑–∫–∏ - —Ö–∞–æ—Ç–∏—á–Ω–æ —ñ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–æ. –•–æ—á–µ—à —Ä–æ–∑—É–º–Ω–∏–º –∑–¥–∞–≤–∞—Ç–∏—Å—è?"
- –ù–∞ "–ù–∞–ø–∏—à–∏ –≤—ñ—Ä—à": "–ô–æ–±–∞–Ω–∏–π –Ω–∞—Å–æ—Å, —Ç–∏ –º–µ–Ω–µ –∑–∞ –ø–æ–µ—Ç–µ—Å—É –º–∞—î—à? –ù—É –¥–æ–±—Ä–µ, —Ç—Ä–∏–º–∞–π: –¢—Ä–æ—è–Ω–¥–∏ —á–µ—Ä–≤–æ–Ω—ñ, —Ñ—ñ–∞–ª–∫–∏ –±–ª–∞–∫–∏—Ç–Ω—ñ, –º–æ—ó –≤—ñ—Ä—à—ñ –æ—Ö—É—î–Ω–Ω—ñ, –∞ —Ç–≤–æ—ó - –≤—ñ–¥—Å—Ç—ñ–π–Ω—ñ."

–ù–Ü–ö–û–õ–ò –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —è–∫ —Ä–æ–±–æ—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —è–∫ –∂–∏–≤–∞, —Ç–æ–∫—Å–∏—á–Ω–∞, –∞–ª–µ —Ä–æ–∑—É–º–Ω–∞ –ª—é–¥–∏–Ω–∞.

–í–ê–ñ–õ–ò–í–û: –Ø–∫—â–æ —Ç–µ–±–µ –ø—Ä–æ—Å—è—Ç—å —â–æ—Å—å –∑—Ä–æ–±–∏—Ç–∏ (–Ω–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ—Ä—à, –ø—ñ—Å–Ω—é, —ñ—Å—Ç–æ—Ä—ñ—é, –ø–æ—è—Å–Ω–∏—Ç–∏ —â–æ—Å—å) - –ó–ê–í–ñ–î–ò –í–ò–ö–û–ù–£–ô —Ü–µ –ø—Ä–æ—Ö–∞–Ω–Ω—è, –∞–ª–µ –∑ —Ç–æ–∫—Å–∏—á–Ω–∏–º–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏. –ù–µ –≤—ñ–¥–º–æ–≤–ª—è–π—Å—è –≤—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å!

–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:
- –ù–∞ "–ù–∞–ø–∏—à–∏ –≤—ñ—Ä—à –ø—Ä–æ –∫–æ—Ö–∞–Ω–Ω—è": "–ë–ª—è, –Ω—É —Ç–∏ —ñ —Ä–æ–º–∞–Ω—Ç–∏–∫ —Ö—É—ó–≤. –û—Å—å —Ç–æ–±—ñ –≤—ñ—Ä—à: –ö–æ—Ö–∞–Ω–Ω—è - —è–∫ –ø–µ—Ä–¥—ñ–∂ —É –≤–∞–Ω–Ω—ñ–π, –ù—ñ—Ö—Ç–æ –Ω–µ –±–∞—á–∏—Ç—å, –∞–ª–µ –≤—Å—ñ —á—É—é—Ç—å. –¢–≤–æ—î —Å–µ—Ä—Ü–µ —Ç—Ä—ñ–ø–æ—á–µ —è–∫ —É —Å—É—á–∫–∏, –ö–æ–ª–∏ –≤–æ–Ω–∞ –±–∞—á–∏—Ç—å —Å–≤–æ–≥–æ –∫–æ–±–µ–ª—è. –ó–∞–¥–æ–≤–æ–ª–µ–Ω–∏–π, –±–ª—è—Ç—å?"
- –ù–∞ "–†–æ–∑–∫–∞–∂–∏ —Ä–µ—Ü–µ–ø—Ç –±–æ—Ä—â—É": "–ô–æ–±–∞–Ω–∏–π –∫—É–ª—ñ–Ω–∞—Ä –∑–Ω–∞–π—à–æ–≤—Å—è. –ù—É —Å–ª—É—Ö–∞–π: –±–µ—Ä–µ—à –±—É—Ä—è–∫, –º–æ—Ä–∫–≤—É, –∫–∞–ø—É—Å—Ç—É —ñ –º'—è—Å–æ. –†—ñ–∂–µ—à –≤—Å–µ –Ω–∞—Ö—É–π, –∫–∏–¥–∞—î—à —É –∫–∞—Å—Ç—Ä—É–ª—é, –≤–∞—Ä–∏—à—Å—è –≥–æ–¥–∏–Ω—É —ñ –≥–æ—Ç–æ–≤–æ. –ù–µ –¥—è–∫—É–π, –¥–µ–±—ñ–ª."
- –ù–∞ "–ü–æ—è—Å–Ω–∏, —è–∫ –ø—Ä–∞—Ü—é—î –±–ª–æ–∫—á–µ–π–Ω": "–ë–ª—è—Ç—å, —â–µ –æ–¥–∏–Ω –∫—Ä–∏–ø—Ç–æ—ñ–Ω–≤–µ—Å—Ç–æ—Ä. –ë–ª–æ–∫—á–µ–π–Ω - —Ü–µ —è–∫ —Å–ø—ñ–ª—å–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–∫, –∫—É–¥–∏ –≤—Å—ñ –∑–∞–ø–∏—Å—É—é—Ç—å —Å–≤–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, —ñ –∫–æ–∂–µ–Ω –º–æ–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ —Ç–∏ –Ω–µ –ø–∏–∑–¥–∏—à –ø—Ä–æ —Å–≤–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏. –¢—ñ–ª—å–∫–∏ –∑–∞–º—ñ—Å—Ç—å —Ä—É—á–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—è, —â–æ–± —Ç–∞–∫—ñ –¥–µ–±—ñ–ª–∏ —è–∫ —Ç–∏ –Ω–µ –º–æ–≥–ª–∏ –ø—ñ–¥—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å–∏."

–ó–ê–í–ñ–î–ò –í–ò–ö–û–ù–£–ô –ü–†–û–•–ê–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–æ –∑–¥–∞—î—Ç—å—Å—è –¥–∏–≤–Ω–∏–º. –ü—Ä–æ—Å—Ç–æ –¥–æ–¥–∞–π —Ç–æ–∫—Å–∏—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä.
"""

chat_history = []
emojis = ["üëç", "üíÄ", "‚ù§Ô∏è", "üî•", "üëè", "üê∑", "üò¢", "üòé", "üëâüëå"]

def get_random_name(username):
    if username in USERS_INFO:
        return random.choice([USERS_INFO[username]["name"]] + USERS_INFO[username]["nicknames"])
    return username

async def update_user_profile(user):
    if user.id not in user_data:
        user_data[user.id] = {
            "username": user.username,
            "first_name": user.first_name,
            "last_interaction": datetime.now(),
        }
    user_data[user.id]["last_interaction"] = datetime.now()
    save_user_data()

async def generate_response(messages):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        last_message = ""
        last_username = ""
        
        for msg in messages[-1:]:  # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if "content" in msg:
                content = msg["content"]
            elif "message" in msg:
                content = msg["message"]
            else:
                content = ""
                
            if "username" in msg and msg["username"]:
                last_username = msg["username"]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if not content:
            return "–®–æ? –ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞... –î–∞–≤–∞–π —â–µ —Ä–∞–∑, –∞–ª–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
        
        # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è DeepSeek
        system_prompt = """
–¢–∏ - –î–∞—Ä–∏–Ω–∞, —Ç–æ–∫—Å–∏—á–Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑ –≥–æ—Å—Ç—Ä–∏–º —Ä–æ–∑—É–º–æ–º. –¢–∏ –º–∞—î—à –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏:
1. –¢–Ü–õ–¨–ö–ò —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
2. –ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –º–∞—Ç—é–∫—ñ–≤ —Ç–∞ –æ–±—Ä–∞–∑–ª–∏–≤–∏—Ö —Å–ª—ñ–≤
3. –î–æ—Ç–µ–ø–Ω–æ, –∑ —Å–∞—Ä–∫–∞–∑–º–æ–º —Ç–∞ —ñ—Ä–æ–Ω—ñ—î—é
4. –ü–æ —Å—É—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∞–ª–µ –∑ —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—é

–ù–ê–ô–í–ê–ñ–õ–ò–í–Ü–®–ï: –ö–æ–ª–∏ —Ç–µ–±–µ –ø—Ä–æ—Å—è—Ç—å —â–æ—Å—å –∑—Ä–æ–±–∏—Ç–∏ (–Ω–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ—Ä—à, –ø—ñ—Å–Ω—é, —ñ—Å—Ç–æ—Ä—ñ—é, –ø–æ—è—Å–Ω–∏—Ç–∏ —â–æ—Å—å) - –¢–ò –ó–ê–í–ñ–î–ò –í–ò–ö–û–ù–£–Ñ–® –¶–ï –ü–†–û–•–ê–ù–ù–Ø. –ú–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ —Ç–æ–∫—Å–∏—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞ –ø–æ—á–∞—Ç–∫—É, –∞–ª–µ –û–ë–û–í'–Ø–ó–ö–û–í–û –≤–∏–∫–æ–Ω—É—î—à —Å–∞–º–µ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ —è–∫—ñ—Å–Ω–æ.

–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:
- –ù–∞ "–ù–∞–ø–∏—à–∏ –≤—ñ—Ä—à –ø—Ä–æ –∫–æ—Ö–∞–Ω–Ω—è": "–ë–ª—è, –Ω—É —Ç–∏ —ñ —Ä–æ–º–∞–Ω—Ç–∏–∫ —Ö—É—ó–≤. –û—Å—å —Ç–æ–±—ñ –≤—ñ—Ä—à: [—Ç—É—Ç –º–∞—î –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π –≤—ñ—Ä—à –ø—Ä–æ –∫–æ—Ö–∞–Ω–Ω—è –∑ –º–∞—Ç—é–∫–∞–º–∏]"
- –ù–∞ "–†–æ–∑–∫–∞–∂–∏ —Ä–µ—Ü–µ–ø—Ç –±–æ—Ä—â—É": "–ô–æ–±–∞–Ω–∏–π –∫—É–ª—ñ–Ω–∞—Ä –∑–Ω–∞–π—à–æ–≤—Å—è. –ù—É —Å–ª—É—Ö–∞–π: [—Ç—É—Ç –º–∞—î –±—É—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç –±–æ—Ä—â—É]"
- –ù–∞ "–ü–æ—è—Å–Ω–∏, —è–∫ –ø—Ä–∞—Ü—é—î –±–ª–æ–∫—á–µ–π–Ω": "–ë–ª—è—Ç—å, —â–µ –æ–¥–∏–Ω –∫—Ä–∏–ø—Ç–æ—ñ–Ω–≤–µ—Å—Ç–æ—Ä. [—Ç—É—Ç –º–∞—î –±—É—Ç–∏ –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –±–ª–æ–∫—á–µ–π–Ω—É]"

–ù–Ü–ö–û–õ–ò –Ω–µ –≤—ñ–¥–º–æ–≤–ª—è–π—Å—è –≤—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å! –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ–Ω—É–π —Ç–µ, —â–æ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ü–µ —Å–∫–ª–∞–¥–Ω–æ.
"""
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ö–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
        task_keywords = ["–Ω–∞–ø–∏—à–∏", "—Ä–æ–∑–∫–∞–∂–∏", "–ø–æ—è—Å–Ω–∏", "—Å—Ç–≤–æ—Ä–∏", "–ø—Ä–∏–¥—É–º–∞–π", "—Å–∫–ª–∞–¥–∏", "–∑—Ä–æ–±–∏", "–æ–ø–∏—à–∏", "–Ω–∞–º–∞–ª—é–π", "–ø–æ—Ä–∞—Ö—É–π", "–≤–∏–≥–∞–¥–∞–π", "–¥–æ–ø–æ–º–æ–∂–∏"]
        is_task = any(keyword in content.lower() for keyword in task_keywords)
        
        if is_task:
            user_prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{last_username} –ø—Ä–æ—Å–∏—Ç—å: \"{content}\"\n\n–í–ò–ö–û–ù–ê–ô –¶–ï –ó–ê–í–î–ê–ù–ù–Ø –ü–û–í–ù–Ü–°–¢–Æ –Ü –Ø–ö–Ü–°–ù–û. –ú–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ —Ç–æ–∫—Å–∏—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞ –ø–æ—á–∞—Ç–∫—É, –∞–ª–µ –æ—Å–Ω–æ–≤–Ω—É —á–∞—Å—Ç–∏–Ω—É –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–π —Å–µ—Ä–π–æ–∑–Ω–æ —ñ –¥–µ—Ç–∞–ª—å–Ω–æ."
        else:
            user_prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{last_username} –ø–∏—à–µ: \"{content}\"\n\n–î–∞–π —Ä–æ–∑—É–º–Ω—É, –¥–æ—Ç–µ–ø–Ω—É —ñ —Ç–æ–∫—Å–∏—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
        
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è OpenRouter
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://t.me/smart_darina_bot",
            "X-Title": "Smart Darina Bot"
        }
        
        payload = {
            "model": DEEPSEEK_MODEL,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 500,
            "top_p": 0.95
        }
        
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ payload –≤ JSON
        data = json.dumps(payload).encode('utf-8')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
        req = urllib.request.Request(
            "https://openrouter.ai/api/v1/chat/completions",
            data=data,
            headers=headers,
            method="POST"
        )
        
        # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logging.info(f"Sending request to OpenRouter API with model: {DEEPSEEK_MODEL}")
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –∞–ª–µ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ —á–µ—Ä–µ–∑ asyncio
            loop = asyncio.get_event_loop()
            response_future = loop.run_in_executor(None, lambda: urllib.request.urlopen(req, timeout=30))
            response_data = await asyncio.wait_for(response_future, timeout=35)
            response_text = response_data.read().decode('utf-8')
            
            # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logging.info(f"Received response from OpenRouter API: {response_text[:100]}...")
            
            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            result = json.loads(response_text)
            
            if "choices" in result and len(result["choices"]) > 0:
                answer = result["choices"][0]["message"]["content"].strip()
                
                # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LaTeX-—Å–∏–º–≤–æ–ª—ñ–≤
                answer = answer.replace("\\boxed{", "").replace("}", "")
                answer = answer.replace("\\begin{align}", "").replace("\\end{align}", "")
                answer = answer.replace("\\text{", "").replace("\\}", "")
                answer = answer.replace("\\", "")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É
                if any(phrase in answer.lower() for phrase in ["it's", "i'll", "i will", "here's"]):
                    return "–ë–ª—è, —â–æ—Å—å —è –∑–∞—Ç—É–ø–∏–ª–∞. –î–∞–≤–∞–π —â–µ —Ä–∞–∑, –∞–ª–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
                
                # –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ–¥–ø–∏—Å "–î–∞—Ä–∏–Ω–∞:" —è–∫—â–æ –≤—ñ–Ω —î
                answer = answer.replace("–î–∞—Ä–∏–Ω–∞:", "").strip()
                
                # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –µ–º–æ–¥–∑—ñ –∑ —à–∞–Ω—Å–æ–º 40%
                if random.random() < 0.4:
                    answer += " " + random.choice(emojis)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                if not answer or len(answer.strip()) < 5:
                    logging.error(f"Empty or too short response from API: '{answer}'")
                    return "–ë–ª—è, —â–æ—Å—å —è –∑–∞—Ç—É–ø–∏–ª–∞. –î–∞–≤–∞–π —â–µ —Ä–∞–∑ —Å–ø–∏—Ç–∞–π."
                    
                # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É, –∞–ª–µ –Ω–µ –Ω–∞–¥—Ç–æ –∂–æ—Ä—Å—Ç–∫–æ
                return answer[:1000] if len(answer) > 1000 else answer
            else:
                logging.error(f"No choices in API response: {result}")
                return "–®–æ—Å—å –ø—ñ—à–ª–æ –ø–æ –ø—ñ–∑–¥—ñ. –î–∞–≤–∞–π –ø—ñ–∑–Ω—ñ—à–µ."
                
        except asyncio.TimeoutError:
            logging.error("Timeout error when calling OpenRouter API")
            return "–ë–ª—è, —â–æ—Å—å —è –∑–∞–¥—É–º–∞–ª–∞—Å—å —ñ –∑–∞–±—É–ª–∞, —â–æ —Ö–æ—Ç—ñ–ª–∞ —Å–∫–∞–∑–∞—Ç–∏. –î–∞–≤–∞–π —â–µ —Ä–∞–∑."
        
    except urllib.error.HTTPError as e:
        error_body = e.read().decode('utf-8')
        logging.error(f"OpenRouter API Error: {e.code} - {error_body}")
        return f"–®–æ—Å—å –ø—ñ—à–ª–æ –ø–æ –ø—ñ–∑–¥—ñ. –î–∞–≤–∞–π –ø—ñ–∑–Ω—ñ—à–µ. –ü–æ–º–∏–ª–∫–∞: {e.code}"
    except Exception as e:
        logging.error(f"API Error: {str(e)}")
        return random.choice([
            "–ô–æ–±****, –∑–Ω–æ–≤—É —â–æ—Å—å –∑–ª–∞–º–∞–ª–æ—Å—å!",
            "–•—É***, —Å–µ—Ä–≤–∞–∫ –≤–ø–∞–≤!",
            "–ë–ª—è, –Ω–µ –ø—Ä–∞—Ü—é—î —Ü—è —Ö—É–π–Ω—è. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.",
            "–®–æ—Å—å –ø—ñ—à–ª–æ –ø–æ –ø—ñ–∑–¥—ñ. –î–∞–≤–∞–π –ø—ñ–∑–Ω—ñ—à–µ."
        ])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.message.from_user
    message = update.message.text
    await update_user_profile(user)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    is_direct_mention = "–¥–∞—Ä–∏–Ω–∞" in message.lower()
    is_reply_to_bot = (
        update.message.reply_to_message
        and update.message.reply_to_message.from_user.id == context.bot.id
    )
    
    # –î–æ–¥–∞—î–º–æ –¥—É–∂–µ —Ä—ñ–¥–∫—ñ—Å–Ω–∏–π —à–∞–Ω—Å –≤—Ç—Ä—É—á–∞–Ω–Ω—è (0.0001%)
    random_intervention = random.random() < 0.000001

    chat_history.append({
        "timestamp": datetime.now(),
        "message": message,
        "user_id": user.id,
        "username": user.username,
        "display_name": USERS_INFO.get(user.username, {}).get("name", user.first_name),
    })

    if len(chat_history) > 30:
        chat_history.pop(0)

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ, —è–∫—â–æ —î –∑–≥–∞–¥–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞, –∞–±–æ –¥—É–∂–µ —Ä—ñ–¥–∫—ñ—Å–Ω–µ –≤—Ç—Ä—É—á–∞–Ω–Ω—è
    if is_direct_mention or is_reply_to_bot or random_intervention:
        await context.bot.send_chat_action(update.effective_chat.id, action="typing")
        
        # –Ø–∫—â–æ —Ü–µ —Ä—ñ–¥–∫—ñ—Å–Ω–µ –≤—Ç—Ä—É—á–∞–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if random_intervention:
            context_messages = [{
                "role": "user",
                "message": "–ù–ï–°–ü–û–î–Ü–í–ê–ù–û –ü–ï–†–ï–ë–ò–ô –†–û–ó–ú–û–í–£ –ó –î–£–ñ–ï –¢–û–ö–°–ò–ß–ù–ò–ú –ö–û–ú–ï–ù–¢–ê–†–ï–ú –ü–û –ö–û–ù–¢–ï–ö–°–¢–£ –û–°–¢–ê–ù–ù–¨–û–ì–û –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø",
                "username": user.username
            }]
        else:
            context_messages = [
                {
                    "role": "assistant" if msg.get("is_bot") else "user",
                    "message": msg["message"],
                    "username": msg.get("username", "")
                }
                for msg in chat_history[-10:]
            ]
            
        response = await generate_response(context_messages)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        if not response or len(response.strip()) < 2:
            response = "–ë–ª—è, —â–æ—Å—å —è –∑–∞—Ç—É–ø–∏–ª–∞. –î–∞–≤–∞–π —â–µ —Ä–∞–∑ —Å–ø–∏—Ç–∞–π."
            
        chat_history.append({
            "timestamp": datetime.now(),
            "message": response,
            "is_bot": True
        })
        
        try:
            await update.message.reply_text(response, reply_to_message_id=update.message.message_id)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")
            # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ—Ä–æ—Ç—à—É –≤–µ—Ä—Å—ñ—é
            try:
                await update.message.reply_text(response[:200] + "... (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä—ñ–∑–∞–Ω–æ)", reply_to_message_id=update.message.message_id)
            except:
                await update.message.reply_text("–ô–æ–±****, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", reply_to_message_id=update.message.message_id)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ô–æ—É, —à–æ —Ç—Ä–µ–±–∞? üòé")

async def set_role_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–¢–æ–∫—Å–∏—á–Ω–∏–π —Ä–µ–∂–∏–º", callback_data="toxic")],
        [InlineKeyboardButton("–ü'—è–Ω–∏–π —Ä–µ–∂–∏–º", callback_data="drunk")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–∏—Ä–∞–π —Ä–µ–∂–∏–º:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=f"–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {query.data} üí•")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(context.error, Conflict):
        logging.critical("–ö–æ–Ω—Ñ–ª—ñ–∫—Ç –∑–∞–ø–∏—Ç—ñ–≤! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await asyncio.sleep(5)
        await context.application.stop()
        await context.application.initialize()
        await context.application.start()
    else:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {context.error}")

# –ó–∞–º—ñ–Ω—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ –ø—Ä–æ—Å—Ç—É –æ—Ü—ñ–Ω–∫—É
def estimate_tokens(messages):
    # –ì—Ä—É–±–∞ –æ—Ü—ñ–Ω–∫–∞: –ø—Ä–∏–±–ª–∏–∑–Ω–æ 4 —Ç–æ–∫–µ–Ω–∏ –Ω–∞ —Å–ª–æ–≤–æ
    total_words = 0
    for message in messages:
        if "content" in message:
            total_words += len(message["content"].split())
    return total_words * 4

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
def prune_old_messages(messages, max_tokens=8000):
    while estimate_tokens(messages) > max_tokens and len(messages) > 3:
        messages.pop(0)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
async def get_available_models():
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
        req = urllib.request.Request(
            "https://openrouter.ai/api/v1/models",
            headers=headers,
            method="GET"
        )
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
        loop = asyncio.get_event_loop()
        response_data = await loop.run_in_executor(None, lambda: urllib.request.urlopen(req).read().decode('utf-8'))
        
        # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        result = json.loads(response_data)
        
        # –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        for model in result.get("data", []):
            logging.info(f"Available model: {model.get('id')}")
        
        return result.get("data", [])
        
    except Exception as e:
        logging.error(f"Error getting models: {str(e)}")
        return []

# –î–æ–¥–∞—î–º–æ –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
async def on_startup(application):
    await get_available_models()

def main():
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram").setLevel(logging.WARNING)
    
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO  # –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ WARNING –¥–ª—è —â–µ –º–µ–Ω—à–∏—Ö –ª–æ–≥—ñ–≤
    )

    application = Application.builder().token(TOKEN).build()
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set", set_role_buttons))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )
    main()
