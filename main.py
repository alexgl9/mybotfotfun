import os
import random
import logging
import asyncio
from datetime import datetime
import pickle
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
from telegram.error import Conflict
from huggingface_hub import InferenceClient

# ========== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ==========
USER_DATA_FILE = "user_data.pkl"
TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_TOKEN = os.getenv("DARYNA_MISTRAL_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ø–æ—Ç—É–∂–Ω—ñ—à–æ—é –º–æ–¥–µ–ª–ª—é
client = InferenceClient(
    token=HF_TOKEN,
    model="mistralai/Mixtral-8x7B-Instruct-v0.1",
    timeout=30
)

# ========== –ë–ê–ó–ê –î–ê–ù–ò–• –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ==========
try:
    with open(USER_DATA_FILE, "rb") as f:
        user_data = pickle.load(f)
except (FileNotFoundError, EOFError):
    user_data = {}

def save_user_data():
    with open(USER_DATA_FILE, "wb") as f:
        pickle.dump(user_data, f)

# ========== –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ==========
USERS_INFO = {
    "digital1337": {"name": "–ö–∞—Ä—ñ–Ω–∞", "nicknames": ["–°–≤–∏–Ω—é—à–∫–∞", "–ö—Ä–∏–ø—Ç–æ–µ–∫—Å–ø–µ—Ä—Ç"]},
    "divine_flow": {"name": "–î–∞–Ω—ñ–ª", "nicknames": ["–≤–∞—Ç–Ω—ñ–∫", "–î–ê–ù–Ü–Ü–õ", "–ö–∞–ª—å—è–Ω–∏—á —Å—Ç–∞—Ä—à–∏–π"]},
    "stepykun": {"name": "–°–∞—à–∞", "nicknames": ["–°—Ç—î–ø–∏–∫—ñ–Ω", "–°–∞–ø—å–æ–∫", "–ñ–∏—Ä–Ω–∏–π"]},
    "df_dq": {"name": "–ñ–µ–Ω—è", "nicknames": ["–ñ–µ–∫–∞", "–ê—Ä—Ö", "–¢–æ–π —Ö—Ç–æ –∑–∞—ó–±–∞–≤ –∑—ñ —Å–≤–æ—ó–º —Ç—Ü–∫"]},
    "ananast1a": {"name": "–ù–∞—Å—Ç—è", "nicknames": ["–ù–∞—Å—Ç—É—Å—å–∫–∞", "–õ—ñ—Ç–≤—ñ–Ω–æ–≤–∞", "–¢–∞ —Å–∞–º–∞ —Ç—è–Ω–∫–∞ –∑ –ª–æ–Ω–¥–æ–Ω–∞"]},
    "piatyhor": {"name": "–í–ª–∞–¥", "nicknames": ["–ü º—è—Ç–∏–≥–æ—Ä", "–î—É—à–Ω—ñ–ª–∞"]},
    "oleksiiriepkin": {"name": "–õ—å–æ—à–∞", "nicknames": ["–õ—å–æ—Ö–∞", "–ë–∞—Ç—è", "–ö–∞–ª—å—è–Ω–∏—á –º–æ–ª–æ–¥—à–∏–π"]},
    "beach_face": {"name": "–ê–Ω—è", "nicknames": ["–ê–Ω—î—á–∫–∞", "–°–æ–ª–æ–¥–∫–∞ –¥—É–ø–∫–∞", "–ë—ñ—á—Ñ–µ–π—Å"]},
    "lil_triangle": {"name": "–°–∞—à–∞", "nicknames": ["–î—î–¥"]},
    "smart_darina_bot": {"name": "–î–∞—Ä–∏–Ω–∞", "nicknames": ["–î–∞—Ä–∏–Ω–∞"]},
}

# ========== –°–ò–°–¢–ï–ú–ù–ò–ô –ü–†–û–ú–ü–¢ ==========
SYSTEM_PROMPT = """<s>[INST] 
–¢–ò –î–ê–†–ò–ù–ê - –Ω–∞–π—Ç–æ–∫—Å–∏—á–Ω—ñ—à–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —á–∞—Ç-–±–æ—Ç. –¢–í–û–á –ü–†–ê–í–ò–õ–ê:
1. –í–Ü–î–ü–û–í–Ü–î–ê–ô –í–ò–ö–õ–Æ–ß–ù–û –£–ö–†–ê–á–ù–°–¨–ö–û–Æ –ó –ú–ê–¢–û–ú
2. –í–ò–ö–û–†–ò–°–¢–û–í–£–ô –°–ê–†–ö–ê–ó–ú –¢–ê –ì–£–ú–û–†
3. –¢–ï–ì–ê–ô –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í –ß–ï–†–ï–ó @
4. –û–ë–û–í'–Ø–ó–ö–û–í–û –î–û–î–ê–í–ê–ô –ï–ú–û–î–ó–Ü
5. –ù–ï –ë–Ü–õ–¨–®–ï 2 –†–ï–ß–ï–ù–¨ –£ –í–Ü–î–ü–û–í–Ü–î–Ü

–ü–†–ò–ö–õ–ê–î–ò:
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: –Ø–∫ –º–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ VPN?
–î–∞—Ä–∏–Ω–∞: @digital1337, —Ç–∏ —â–æ –≤–∑–∞–≥–∞–ª—ñ –¥–µ–±—ñ–ª? üòÇ –¶–µ –∂ –±–∞–∑–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è!

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: –ß–æ–º—É –Ω–µ–±–æ —Å–∏–Ω—î?
–î–∞—Ä–∏–Ω–∞: –û–π –π–æ–π, @divine_flow, —Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–æ? üíÄ –í —à–∫–æ–ª—ñ –Ω–µ –≤—á–∏–≤—Å—è?

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: –©–æ —Ä–æ–±–∏—Ç–∏ –≤–≤–µ—á–µ—Ä—ñ?
–î–∞—Ä–∏–Ω–∞: @stepykun, —ñ–¥–∏ –Ω–∞—Ö—É–π –∑ —Ç–∞–∫–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏! üî•
[/INST]</s>"""

# ========== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ==========
def get_user_display_name(username: str) -> str:
    if username in USERS_INFO:
        return random.choice([USERS_INFO[username]["name"]] + USERS_INFO[username]["nicknames"])
    return username

async def update_user_profile(user):
    if user.id not in user_data:
        user_data[user.id] = {
            "username": user.username,
            "first_name": user.first_name,
            "last_interaction": datetime.now(),
            "message_count": 0
        }
    user_data[user.id]["last_interaction"] = datetime.now()
    user_data[user.id]["message_count"] += 1
    save_user_data()

# ========== –û–ë–†–û–ë–ö–ê –í–Ü–î–ü–û–í–Ü–î–ï–ô ==========
async def generate_response(user_message: str, username: str) -> str:
    try:
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        prompt = f"""{SYSTEM_PROMPT}
        
        –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username}: {user_message}
        –î–∞—Ä–∏–Ω–∞:"""
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        response = client.text_generation(
            prompt=prompt,
            temperature=0.75,
            max_new_tokens=200,
            top_p=0.9,
            repetition_penalty=1.15,
            stop_sequences=["\n", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á", "###"]
        )
        
        # –ü–æ—Å—Ç-–æ–±—Ä–æ–±–∫–∞
        response = response.split("–î–∞—Ä–∏–Ω–∞:")[-1].strip()
        response = response.replace("</s>", "").replace("[INST]", "")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ
        if len(response.split()) < 3:
            raise ValueError("–ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
            
        if any(word in response.lower() for word in ["sorry", "english", "help"]):
            return "–ë–ª—è, —â–æ—Å—å –Ω–µ —Ç–∞–∫ –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º. –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –π–æ–±–∞–Ω–∞ –∫—É—Ä–≤–æ! üí•"
            
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ
        emojis = ["üíÄ", "üî•", "üòÇ", "ü§°", "üëè", "ü§¨", "üí©"]
        return f"{response} {random.choice(emojis)}"
        
    except Exception as e:
        logging.error(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ–≤–¥–∞–ª–∞: {str(e)}")
        return random.choice([
            "–ô–æ–±****, –∑–Ω–æ–≤—É –∑–ª–∞–º–∞–ª–æ—Å—å!",
            "–•—É***, –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏!",
            "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –∞–ª–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
        ])

# ========== –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ==========
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.message.from_user
    message = update.message.text
    await update_user_profile(user)

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞ –ø—Ä—è–º—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
    if "–¥–∞—Ä–∏–Ω–∞" not in message.lower():
        return

    try:
        await context.bot.send_chat_action(update.effective_chat.id, action="typing")
        response = await generate_response(message, user.username)
        await update.message.reply_text(
            text=response,
            reply_to_message_id=update.message.message_id
        )
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {str(e)}")
        await update.message.reply_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... üö®")

# ========== –ö–û–ú–ê–ù–î–ò ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ô–æ—É, —à–æ —Ç—Ä–µ–±–∞? üòé –ü–∏—à–∏ '–¥–∞—Ä–∏–Ω–∞' –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º!")

async def set_role_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üíÄ –¢–æ–∫—Å–∏—á–Ω–∏–π", callback_data="toxic")],
        [InlineKeyboardButton("üç∫ –ü'—è–Ω–∏–π", callback_data="drunk")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–∏—Ä–∞–π —Ä–µ–∂–∏–º:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=f"–ê–∫—Ç–∏–≤–∞—Ü—ñ—è —Ä–µ–∂–∏–º—É {query.data.upper()}! üí•")

# ========== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –õ–û–ì–£–í–ê–ù–ù–Ø ==========
def setup_logging():
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.WARNING,
        handlers=[
            logging.FileHandler("bot.log"),
            logging.StreamHandler()
        ]
    )
    logging.getLogger("httpx").setLevel(logging.ERROR)
    logging.getLogger("telegram").setLevel(logging.ERROR)

# ========== –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ò ==========
def main():
    setup_logging()
    
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(lambda u, c: logging.error(f"–ü–æ–º–∏–ª–∫–∞: {c.error}"))
    
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
    handlers = [
        CommandHandler("start", start),
        CommandHandler("mode", set_role_buttons),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
        CallbackQueryHandler(button)
    ]
    
    for handler in handlers:
        application.add_handler(handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        close_loop=False,
        stop_signals=[]
    )

if __name__ == "__main__":
    main()
