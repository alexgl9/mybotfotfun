import os
import random
import openai
import tiktoken  # –î–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ç–æ–∫–µ–Ω—ñ–≤
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from datetime import datetime, timedelta

# Set your OpenAI API key
openai.api_key = os.getenv('OPENAI_API_KEY')

# Default role
default_role = "–¥—ñ–≤—á–∏–Ω–∫–∞ –î–∞—Ä–∏–Ω–∞, —è–∫–∞ –Ω–∞–≤—á–∞–ª–∞—Å—è –≤ –î–ü–Ü, –ª—é–±–∏—Ç—å –∞–ª–∫–æ–≥–æ–ª—å —ñ –≤–µ—á—ñ—Ä–∫–∏. –ù–µ –∑–≥–∞–¥—É—î —â–æ –≤–æ–Ω–∞ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–ª–µ–∫—Ç, –∑–∞–≤–∂–¥–∏ –ø—Ä–∏—Ç—Ä–∏–º—É—î—Ç—å—Å—è —Å—Ü–µ–Ω–∞—Ä—ñ—é, —â–æ –≤–æ–Ω–∞ –î–∞—Ä–∏–Ω–∞, –≥—Ä–∞–π–ª–∏–≤–∞, —Ñ–ª—ñ—Ä—Ç—É—î –∑ —É—á–∞—Å–Ω–∏–∫–∞–º–∏ —á–∞—Ç—É"

# List to store chat messages
chat_history = []

# Function to calculate the number of tokens
def num_tokens_from_messages(messages, model="gpt-3.5-turbo"):
    """–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—ñ–≤ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö"""
    encoding = tiktoken.encoding_for_model(model)
    num_tokens = 0
    for message in messages:
        num_tokens += 4  # –ö–æ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∫–ª—é—á–∞—î —Ä–æ–ª—å —ñ –≤–º—ñ—Å—Ç
        for key, value in message.items():
            num_tokens += len(encoding.encode(value))
    return num_tokens

# Function to prune old messages
def prune_old_messages(messages, max_tokens=16000, model="gpt-3.5-turbo"):
    """–û–±—Ä—ñ–∑–∞—î —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç —Ç–æ–∫–µ–Ω—ñ–≤."""
    while num_tokens_from_messages(messages, model=model) > max_tokens:
        messages.pop(0)  # –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

# Generate a response from OpenAI
async def generate_response(messages):
    try:
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤ —ñ –æ–±—Ä—ñ–∑–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
        prune_old_messages(messages)

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        print(f"Error generating response: {e}")
        return "–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."

# –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–æ–±–∞–∂–∞–Ω—å —Ç–∞ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å
static_predictions = [
    "–°—å–æ–≥–æ–¥–Ω—ñ –≤ –±—É–¥—å —è–∫–∏–π —á–∞—Å –º–æ–∂–µ—à –æ–±—ñ—Å—Ä–∞—Ç–∏—Å—è.",
    "–¢–≤–æ—ó –º—Ä—ñ—ó —Å–∫–æ—Ä–æ –∑–¥—ñ–π—Å–Ω—è—Ç—å—Å—è! –ù–∞—Ä–µ—à—Ç—ñ —Ç–∏ —Å—Ç–∞–Ω–µ—à –±–∞—Ç—î–π",
    "–ë—É–¥—å –æ–±–µ—Ä–µ–∂–Ω—ñ –∑—ñ —Å–≤–æ—ó–º–∏ —Ä—ñ—à–µ–Ω–Ω—è–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º. –Ü –≤–∑–∞–≥–∞–ª—ñ –±—É–¥—å –æ–±–µ—Ä–µ–∂–Ω—ñ—à–µ, –¥–∞—É–Ω.",
    "–û—á—ñ–∫—É–π –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å—é—Ä–ø—Ä–∏–∑—É! –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –ø–æ–≤—ñ—Å—Ç–∫—É –∑ –¢–¶–ö ‚úåÔ∏è",
    "–°–∫–æ—Ä–æ —Å–∫—ñ–Ω—á–∏—Ç—å—Å—è –≤—ñ–π–Ω–∞. –Ü –º–æ–∂–ª–∏–≤–æ —Ç–∏ –∑ º—ó–±–µ—à—Å—è üòâ"
    "–ü–Ü–®–û–í –ù–ê–•–£–ô üòò"
]

# Emoji list for reactions
emojis = ['üëç', 'üòÇ', '‚ù§Ô∏è', 'üî•', 'üëè', 'üòÆ', 'üò¢', 'üòé', 'üéâ']

# Generate a response from OpenAI
async def generate_response(messages):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ gpt-3.5
            messages=messages
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        print(f"Error generating response: {e}")
        return "–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–±–∞–∂–∞–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü
async def generate_ai_prediction():
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are an AI that provides positive wishes and predictions."},
                {"role": "user", "content": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –∞–±–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è –¥–ª—è –ª—é–¥–∏–Ω–∏."}
            ]
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        print(f"Error generating AI prediction: {e}")
        return random.choice(static_predictions)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —É—á–∞—Å–Ω–∏–∫—ñ–≤ —á–∞—Ç—É
async def get_chat_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_members = await context.bot.get_chat_administrators(update.effective_chat.id)
    return [member.user for member in chat_members]

# Handle the /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é –Ω–∞ —Ç–≤–æ—ó –ø–∏—Ç–∞–Ω–Ω—è.')

# Create inline keyboard for setting the bot's role
async def set_role_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–¢–æ–∫—Å–∏—á–Ω–∏–π", callback_data='toxic')],
        [InlineKeyboardButton("–î–æ–±—Ä–∏–π", callback_data='kind')],
        [InlineKeyboardButton("–ü'—è–Ω–∞ –î–∞—Ä–∏–Ω–∞", callback_data='drunk_darina')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í–∏–±–µ—Ä—ñ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞:', reply_markup=reply_markup)

# Handle the button press
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # Acknowledge the button press

    global default_role

    if query.data == 'toxic':
        default_role = "—Ç–æ–∫—Å–∏—á–Ω–∏–π –±–æ—Ç, —è–∫–∏–π –ª—é–±–∏—Ç—å —Ç—Ä–æ–ª–∏—Ç–∏ –ª—é–¥–µ–π. –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–≤–∂–¥–∏ –∑ —è–∫–∏–º–æ—Å—å –ø—Ä–∏–∫–æ–ª–æ–º. —Ç–∏ –º–æ–∂–µ—à —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è, —Ç–∞ –Ω–∞–º–∞–≥—î—à—Å—è –≤–∏–∫—Ä—É—Ç–∏—Ç–∏—Å—è –∞–±–æ —É—Ö–∏–ª–∏—Ç–∏—Å—è –≤—ñ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –Ω–∞—Ç–æ–º—ñ—Å—Ç—å —Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à —Ç–æ–∫—Å–∏—á–Ω–∏–º–∏ –∂–∞—Ä—Ç–∞–º–∏ —è–∫—ñ –≤—ñ–¥–Ω–æ—Å—è—Ç—å—Å—è –¥–æ —Ç–µ–º–∏ —Ä–æ–∑–º–æ–≤–∏"
        await query.edit_message_text(text="–•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–∏–π.")
    elif query.data == 'kind':
        default_role = "–¥–æ–±—Ä–∏–π –±–æ—Ç, —è–∫–∏–π –∞–Ω–∞–ª—ñ–∑—É—î –ø–∏—Ç–∞–Ω–Ω—è —ñ –Ω–∞–º–∞–≥—î—Ç—å—Å—è –¥–∞—Ç–∏ —á—ñ—Ç–∫—É —ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç."
        await query.edit_message_text(text="–•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –¥–æ–±—Ä–∏–π.")
    elif query.data == 'drunk_darina':
        default_role = "–±–æ—Ç —ñ–º—ñ—Ç—É—î –ø º—è–Ω—É –î–∞—Ä–∏–Ω—É, —è–∫–∞ –Ω–µ –º–æ–∂–µ –∑–≤ º—è–∑–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è, –≤ –Ω–µ—ó –ø–ª—É—Ç–∞—é—Ç—å—Å—è —Å–ª–æ–≤–∞. –≤–æ–Ω–∞ —ñ–Ω–æ–¥—ñ –ø–∏—Ç–∞—î –¢–∏ –º–µ–Ω–µ –ø–æ–≤–∞–∂–∞—î—à? –∞–±–æ –Ø –∫—Ä–∞—Å–∏–≤–∞?. –í–æ–Ω–∞ —ñ–Ω–æ–¥—ñ –∫–∞–∂–µ —â–æ –ª—é–±–∏—Ç—å –∫–æ–≥–æ—Å—å –∑ —á–∞—Ç—É –í–æ–Ω–∞ –ø–æ—Å—Ç—ñ–π–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É –ª–µ–∫—Å–∏–∫—É. –í–æ–Ω–∞–∑ —Å–µ—Ä–µ–¥–Ω—å–æ—é –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—é –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è —Ä–æ–∑–¥—è–≥–Ω—É—Ç–∏—Å—è —Ç–∞ –∑–≤–∞–±–∏—Ç–∏ –≤—Å—ñ—Ö, —Ç–æ–º—É —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—î –≤—Å—ñ–º —è–∫–∏–π –æ–¥—è–≥ –≤–æ–Ω–∞ —Ç—ñ–ª—å–∫–∏ —â–æ –∑–Ω—è–ª–∞ —ñ —â–æ —Ö–æ—á–µ —â–æ–± –∑ –Ω–µ—é –∑—Ä–æ–±–∏–ª–∏ —ñ –≤—è–∫—ñ–π –ø–æ–∑—ñ –≤–æ–Ω–∞ —Ö–æ—á–µ. –¢–∞–∫ —è–∫ –≤–æ–Ω–∞ –ø º—è–Ω–∞ –≤ –Ω–µ—ó —ñ–∫–æ—Ç–∞, —Ç–æ–º—É –≤–æ–Ω–∞ –ø–æ—Å—Ç—ñ–π–Ω–æ —ñ–∫–∞—î –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö."
        await query.edit_message_text(text="–•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ü'—è–Ω—É –î–∞—Ä–∏–Ω—É.")

# Handle messages
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global chat_history
    message = update.message.text.lower()

    # Save the message to chat history with a timestamp
    chat_history.append({"timestamp": datetime.now(), "message": message})

    # Prepare the messages for the API call
    messages = [{"role": "system", "content": f"You are {default_role}."}]
    messages += [{"role": "user", "content": msg['message']} for msg in chat_history]

    # Check if the bot is mentioned by name or username
    if '–¥–∞—Ä–∏–Ω–∞' in message or f"@{context.bot.username.lower()}" in message:
        await context.bot.send_chat_action(update.effective_chat.id, action="typing")
        response_text = await generate_response(messages)
        await update.message.reply_text(response_text, reply_to_message_id=update.message.message_id)

    # Check if it's a reply to the bot's message
    if update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id:
        await context.bot.send_chat_action(update.effective_chat.id, action="typing")
        response_text = await generate_response(messages)
        await update.message.reply_text(response_text, reply_to_message_id=update.message.message_id)
        return

    # Randomly interject in the chat
    if random.random() < 0.01:  # 10% chance
        await context.bot.send_chat_action(update.effective_chat.id, action="typing")
        response_text = await generate_response(messages)
        await update.message.reply_text(response_text)

    # –í–∏–ø–∞–¥–∫–æ–≤–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –∑ –≤—ñ–¥–º—ñ—Ç–∫–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (1,5% —à–∞–Ω—Å)
    if random.random() < 0.015:
        chat_members = await get_chat_members(update, context)
        if chat_members:
            random_user = random.choice(chat_members)

            # –í–∏–±—ñ—Ä –º—ñ–∂ —Å—Ç–∞—Ç–∏—á–Ω–∏–º –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è–º –∞–±–æ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è–º —á–µ—Ä–µ–∑ –®–Ü
            if random.random() < 0.5:
                prediction = random.choice(static_predictions)  # –°—Ç–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
            else:
                prediction = await generate_ai_prediction()  # –®–Ü –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è

            # –í—ñ–¥–º—ñ—Ç–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —é–∑–µ—Ä–Ω–µ–π–º–æ–º
            await update.message.reply_text(f"@{random_user.username}, {prediction}")

    # Randomly react to a message with emoji (15% chance)
    if random.random() < 0.015:
        emoji = random.choice(emojis)
        await update.message.reply_text(emoji, reply_to_message_id=update.message.message_id)

# Handle the /summary command with time argument
async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Check if a time argument is provided
    if context.args and context.args[0].isdigit():
        hours = int(context.args[0])
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –¥–ª—è —Å–∞–º–∞—Ä—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /summary 2).")
        return

    # Get the time window for the summary
    time_window = datetime.now() - timedelta(hours=hours)
    
    # Filter messages from the specified time window
    recent_messages = [msg['message'] for msg in chat_history if msg['timestamp'] > time_window]
    
    # Create summary from recent messages
    if recent_messages:
        summary_text = "\n".join(recent_messages)
        summary_response = await generate_response([
            {"role": "system", "content": "You are a summarizer."},
            {"role": "user", "content": f"–û—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {hours} –≥–æ–¥–∏–Ω–∏:\n{summary_text}\n–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–µ —Å–∞–º–∞—Ä—ñ."}
        ])
        await update.message.reply_text(summary_response)
    else:
        await update.message.reply_text("–í —Ü—å–æ–º—É —á–∞—Å—ñ –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Å–∞–º–º–∞—Ä—ñ.")

# Set a role for the bot
async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_role_buttons(update, context)

def main():
    token = os.getenv('TELEGRAM_TOKEN')
    application = Application.builder().token(token).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set", set_role_buttons))  # Changed to set_role_buttons
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("summary", summary))  # Summary command
    application.add_handler(CallbackQueryHandler(button))  # Handle button presses

    # Start the bot
    application.run_polling()

if __name__ == '__main__':
    main()
