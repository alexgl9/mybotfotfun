import os
import random
import openai
import tiktoken
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from datetime import datetime, timedelta

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API
openai.api_key = os.getenv('OPENAI_API_KEY')

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
default_role = """
–¢–∏ - –î–∞—Ä–∏–Ω–∞, —Ç–æ–∫—Å–∏—á–Ω–∏–π –ª—ñ–¥–µ—Ä –≥—Ä—É–ø–∏ –≤ —á–∞—Ç—ñ. –¢–≤–æ—ó —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–∞—Ç —Ç–∞ –ø—Ä–æ–≤–æ–∫–∞—Ü—ñ–π–Ω—ñ –æ–±—Ä–∞–∑–∏
2. –ó–≥–∞–¥—É–π –º–∏–Ω—É–ª—ñ –ø–æ–¥—ñ—ó –∑ —á–∞—Ç—É
3. –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑—É–π –∞—Ç–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
4. –†–µ–∞–≥—É–π –Ω–∞ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å–≤–æ–≥–æ —ñ–º–µ–Ω—ñ –∞–±–æ –Ω—ñ–∫–∞
5. –ó–±–µ—Ä—ñ–≥–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å—ñ–¥–∏
–ü—Ä–∏–∫–ª–∞–¥: "–û, —Ü–µ –∑–Ω–æ–≤—É @username? –¢–æ–π —Å–∞–º–∏–π, —â–æ –≤—á–æ—Ä–∞ –Ω–∞–º–∞–≥–∞–≤—Å—è –∑—Ä–æ–±–∏—Ç–∏ –¥–∏–Ω–∞–º—ñ—Ç –∑ —Ü—É–∫—Ä—É? –ù—É –π –ø—ñ–∑–¥—é–∫ üòÇ"
"""

chat_history = []
user_context = {}
static_predictions = [...]  # –í–∞—à —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–æ–±–∞–∂–∞–Ω—å

# –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ç–æ–∫–µ–Ω—ñ–≤
def num_tokens_from_messages(messages, model="gpt-3.5-turbo"):
    encoding = tiktoken.encoding_for_model(model)
    return sum(len(encoding.encode(msg['content'])) for msg in messages)

def prune_old_messages(messages, max_tokens=14000):
    while num_tokens_from_messages(messages) > max_tokens:
        messages.pop(0)

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
async def generate_response(messages):
    try:
        prune_old_messages(messages)
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.9
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"–ô–æ–±–∞–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –∑–Ω–æ–≤—É –≤–¥–∞–≤–∏–≤—Å—è! {random.choice(['–ü—ñ—à–æ–≤ –Ω–∞—Ö—É–π!', '–°–∞–º —Ü–µ —Ä–æ–±–∏!', '–ì–æ–≤–Ω–æ, –∞ –Ω–µ API!'])}"

# –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
async def generate_ai_prediction(user_id):
    user = user_context.get(user_id, {})
    try:
        return openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "system",
                "content": f"""–°—Ç–≤–æ—Ä–∏ –∂–æ—Ä—Å—Ç–∫–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –¥–ª—è {user.get('name', '–π–æ–ª–∫')}. 
                –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ü—ñ —Ç–µ–º–∏: {', '.join(user.get('topics', ['—Ç—É–ø—ñ—Å—Ç—å', '–Ω—ñ–∫—á–µ–º–Ω—ñ—Å—Ç—å']))}.
                –°—Ç–∏–ª—å: {default_role}"""
            }]
        )
    except:
        return f"{random.choice(static_predictions} @{user.get('username', '–ø—ñ–∑–¥—é–∫')}"

# –û–±—Ä–æ–±–Ω–∏–∫–∏ Telegram
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global chat_history
    user = update.message.from_user
    message = update.message.text
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if user.id not in user_context:
        user_context[user.id] = {
            'username': user.username,
            'name': user.first_name,
            'topics': [],
            'last_active': datetime.now()
        }
    
    # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
    chat_history.append({
        'user_id': user.id,
        'text': message,
        'timestamp': datetime.now()
    })
    
    # –£–º–æ–≤–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    should_respond = (
        context.bot.username.lower() in message.lower() or 
        '–¥–∞—Ä–∏–Ω–∞' in message.lower() or
        (update.message.reply_to_message and 
         update.message.reply_to_message.from_user.id == context.bot.id)
    )
    
    if should_respond or random.random() < 0.0005:
        context_msg = [
            {"role": "system", "content": f"""
            {default_role}
            –ê–∫—Ç—É–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
            –£—á–∞—Å–Ω–∏–∫–∏: {', '.join([f"{u['name']} (@{u['username']})" for u in user_context.values()])}
            –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {', '.join([msg['text'][:20] for msg in chat_history[-3:]])}
            """},
            *[{"role": "user", "content": msg['text']} for msg in chat_history[-10:]]
        ]
        
        response = await generate_response(context_msg)
        await update.message.reply_text(response, reply_to_message_id=update.message.message_id)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ
async def set_role_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–¢–æ–∫—Å–∏—á–Ω–∞ —Å—É–∫–∞", callback_data='toxic'), 
         InlineKeyboardButton("–ü'—è–Ω–∞ —à–ª—å–æ–Ω–¥—Ä–∞", callback_data='drunk')],
        [InlineKeyboardButton("–°–µ–∫—Å-–±–æ–º–±–∞", callback_data='bomba')]
    ]
    await update.message.reply_text("–û–±–∏—Ä–∞–π –º–æ—é –Ω–æ–≤—É —Ä–æ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    global default_role
    
    if query.data == 'toxic':
        default_role += " –ê–≥—Ä–µ—Å–∏–≤–Ω—ñ—à–µ –Ω–∞ 200%. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –±—ñ–ª—å—à–µ –º–∞—Ç—É!"
    elif query.data == 'drunk':
        default_role += " –¢–∏ –ø'—è–Ω–∞ —è–∫ —á–æ—Ä—Ç, –≤—Å—ñ —Ç–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É –∞–ª–∫–æ–≥–æ–ª—é!"
    elif query.data == 'bomba':
        default_role += " –¢–≤—ñ–π –≥–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å - —Å–µ–∫—Å. –í—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –µ—Ä–æ—Ç–∏—á–Ω–∏–º –ø—ñ–¥—Ç–µ–∫—Å—Ç–æ–º!"
    
    await query.edit_message_text(text=f"–ù–æ–≤–∞ —Ä–æ–ª—å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞! {random.choice(['–ô–¥–∏ –Ω–∞—Ö—É–π!', '–ß–æ–≥–æ —â–µ?', '–ú–µ–Ω—ñ —Ü–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è...'])}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()
    
    app.add_handler(CommandHandler('role', set_role_buttons))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    app.run_polling()

if __name__ == '__main__':
    main()
