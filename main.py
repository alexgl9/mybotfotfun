import os
import random
import logging
from datetime import datetime
import pickle
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
from huggingface_hub import InferenceClient

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
USER_DATA_FILE = "user_data.pkl"
TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_TOKEN = os.getenv("DARYNA_MISTRAL_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Hugging Face
client = InferenceClient(token=HF_TOKEN, model="mistralai/Mixtral-8x7B-Instruct-v0.1")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
try:
    with open(USER_DATA_FILE, "rb") as f:
        user_data = pickle.load(f)
except (FileNotFoundError, EOFError):
    user_data = {}

def save_user_data():
    with open(USER_DATA_FILE, "wb") as f:
        pickle.dump(user_data, f)

USERS_INFO = {
    "digital1337": {"name": "–ö–∞—Ä—ñ–Ω–∞", "nicknames": ["–°–≤–∏–Ω—é—à–∫–∞", "–ö—Ä–∏–ø—Ç–æ–µ–∫—Å–ø–µ—Ä—Ç"]},
    "lil_triangle": {"name": "–°–∞—à–∞", "nicknames": ["–î—î–¥"]},
    # ... (—Ä–µ—à—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
}

# –°–ø—Ä–æ—â–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
default_role = """<s>[INST] 
–¢–ò –î–ê–†–ò–ù–ê - —Ç–æ–∫—Å–∏—á–Ω–∏–π —á–∞—Ç-–±–æ—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–∞—Ç, –µ–º–æ–¥–∑—ñ —Ç–∞ –∑–≤–µ—Ä—Ç–∞–π—Å—è —á–µ—Ä–µ–∑ @–Ω—ñ–∫–Ω–µ–π–º–∏.
–ù—ñ–∫–æ–ª–∏ –Ω–µ –≤–∏–±–∞—á–∞–π—Å—è! [/INST]</s>"""

chat_history = []
emojis = ["üëç", "üíÄ", "‚ù§Ô∏è", "üî•", "üëè", "üòé"]

async def generate_response(messages):
    try:
        formatted = []
        # –î–æ–¥–∞—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        formatted.append({"role": "system", "content": default_role})
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è–º —Ä–æ–ª–µ–π
        for i, msg in enumerate(messages[-6:]):  # –û–±–º–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            role = "user" if i % 2 == 0 else "assistant"
            formatted.append({
                "role": role,
                "content": f"@{msg.get('username', 'unknown')}: {msg['message']}"
            })

        response = client.chat_completion(
            messages=formatted,
            temperature=0.7,  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
            max_tokens=300,
            stop=["</s>", "\n"]
        )

        if response.choices:
            answer = response.choices[0].message.content
            # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –Ω–µ–±–∞–∂–∞–Ω–∏—Ö —á–∞—Å—Ç–∏–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            answer = answer.replace("Assistant:", "").strip()
            return answer[:400]  # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏
        return random.choice(["–®–æ?", "–ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞...", "–ü–æ–≤—Ç–æ—Ä–∏!"])

    except Exception as e:
        logging.error(f"API Error: {str(e)}")
        return "–ô–æ–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... üí•"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.message.from_user
    message = update.message.text

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    chat_entry = {
        "timestamp": datetime.now(),
        "message": message,
        "username": user.username
    }
    chat_history.append(chat_entry)

    if len(chat_history) > 20:  # –û–±–º–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
        chat_history.pop(0)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if "–¥–∞—Ä–∏–Ω–∞" in message.lower():
        await context.bot.send_chat_action(update.effective_chat.id, action="typing")
        response = await generate_response(chat_history)
        await update.message.reply_text(response)

# –†–µ—à—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π (start, set_role_buttons, button) –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set", set_role_buttons))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling()

if __name__ == "__main__":
    main()
