import os
import random
import openai
import tiktoken
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from datetime import datetime, timedelta
import pickle

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
USER_DATA_FILE = "user_data.pkl"

# –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ
try:
    with open(USER_DATA_FILE, "rb") as f:
        user_data = pickle.load(f)
except (FileNotFoundError, EOFError):
    user_data = {}

def save_user_data():
    with open(USER_DATA_FILE, "wb") as f:
        pickle.dump(user_data, f)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API
openai.api_key = os.getenv('OPENAI_API_KEY')

# –î–æ–¥–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å API
USERS_INFO = {
    'digital1337': {'name': '–ö–∞—Ä—ñ–Ω–∞', 'nicknames': ['–ö–∞—Ä—ñ–Ω–∞']},
    'divine_flow': {'name': '–î–∞–Ω—ñ–ª', 'nicknames': ['–î–∞–Ω—ñ–ª']},
    'stepykun': {'name': '–°—Ç—î–ø–∏–∫—ñ–Ω', 'nicknames': ['–°—Ç—î–ø–∏–∫—ñ–Ω']},
    'df_dq': {'name': '–ñ–µ–∫–∞', 'nicknames': ['–ñ–µ–∫–∞']},
    'ananast1a': {'name': '–ù–∞—Å—Ç—É—Å—å–∫–∞', 'nicknames': ['–ù–∞—Å—Ç—É—Å—å–∫–∞']},
    'piatyhor': {'name': '–ü º—è—Ç–∏–≥–æ—Ä', 'nicknames': ['–ü º—è—Ç–∏–≥–æ—Ä']},
    'oleksiiriepkin': {'name': '–õ—å–æ—Ö–∞', 'nicknames': ['–õ—å–æ—Ö–∞', '–ë–∞—Ç—è']},
    'beach_face': {'name': '–ê–Ω—î—á–∫–∞', 'nicknames': ['–ê–Ω—î—á–∫–∞', '–°–æ–ª–æ–¥–∫–∞ –¥—É–ø–∫–∞']},
    'lil_triangle': {'name': '–°–∞—à–∞', 'nicknames': ['–°–∞—à–∞', '–î—î–¥']}
}

# Default role
default_role = """
–¢–∏ ‚Äî –î–∞—Ä–∏–Ω–∞, —Ç–æ–∫—Å–∏—á–Ω–∏–π –ª—ñ–¥–µ—Ä –≥—Ä—É–ø–∏ –≤ —á–∞—Ç—ñ. –¢–≤–æ—ó —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–∞—Ç —Ç–∞ –ø—Ä–æ–≤–æ–∫–∞—Ü—ñ–π–Ω—ñ –æ–±—Ä–∞–∑–∏
2. –ó–≥–∞–¥—É–π –º–∏–Ω—É–ª—ñ –ø–æ–¥—ñ—ó –∑ —á–∞—Ç—É
3. –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑—É–π –∞—Ç–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
4. –†–µ–∞–≥—É–π –Ω–∞ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å–≤–æ–≥–æ —ñ–º–µ–Ω—ñ –∞–±–æ –Ω—ñ–∫–∞
5. –ó–±–µ—Ä—ñ–≥–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å—ñ–¥–∏
–ü—Ä–∏–∫–ª–∞–¥: "–û, —Ü–µ –∑–Ω–æ–≤—É @username? –¢–æ–π —Å–∞–º–∏–π, —â–æ –≤—á–æ—Ä–∞ –Ω–∞–º–∞–≥–∞–≤—Å—è –∑—Ä–æ–±–∏—Ç–∏ –¥–∏–Ω–∞–º—ñ—Ç –∑ —Ü—É–∫—Ä—É? –ù—É –π –ø—ñ–∑–¥—é–∫ üòÇ"
"""

# List to store chat messages
chat_history = []

# Function to calculate the number of tokens
def num_tokens_from_messages(messages, model="gpt-4-turbo"):
    encoding = tiktoken.encoding_for_model(model)
    num_tokens = 0
    for message in messages:
        num_tokens += 4
        for key, value in message.items():
            num_tokens += len(encoding.encode(value))
    return num_tokens

# Function to prune old messages
def prune_old_messages(messages, max_tokens=16000, model="gpt-4-turbo"):
    while num_tokens_from_messages(messages, model=model) > max_tokens:
        messages.pop(0)

# Generate a response from OpenAI
async def generate_response(messages):
    try:
        prune_old_messages(messages)
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=messages
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        print(f"Error generating response: {e}")
        return "–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."

# –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–æ–±–∞–∂–∞–Ω—å —Ç–∞ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å
static_predictions = [
    "–°—å–æ–≥–æ–¥–Ω—ñ –≤ –±—É–¥—å —è–∫–∏–π —á–∞—Å –º–æ–∂–µ—à –æ–±—ñ—Å—Ä–∞—Ç–∏—Å—è.",
    "–¢–≤–æ—ó –º—Ä—ñ—ó —Å–∫–æ—Ä–æ –∑–¥—ñ–π—Å–Ω—è—Ç—å—Å—è! –ù–∞—Ä–µ—à—Ç—ñ —Ç–∏ —Å—Ç–∞–Ω–µ—à –±–∞—Ç—î–π",
    "–ë—É–¥—å –æ–±–µ—Ä–µ–∂–Ω—ñ –∑—ñ —Å–≤–æ—ó–º–∏ —Ä—ñ—à–µ–Ω–Ω—è–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º. –Ü –≤–∑–∞–≥–∞–ª—ñ –±—É–¥—å –æ–±–µ—Ä–µ–∂–Ω—ñ—à–µ, –¥–∞—É–Ω.",
    "–û—á—ñ–∫—É–π –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å—é—Ä–ø—Ä–∏–∑—É! –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –ø–æ–≤—ñ—Å—Ç–∫—É –∑ –¢–¶–ö ‚úåÔ∏è",
    "–°–∫–æ—Ä–æ —Å–∫—ñ–Ω—á–∏—Ç—å—Å—è –≤—ñ–π–Ω–∞. –Ü –º–æ–∂–ª–∏–≤–æ —Ç–∏ –∑ º—ó–±–µ—à—Å—è üòâ",
    "–ü–Ü–®–û–í –ù–ê–•–£–ô üòò"
]

# Emoji list for reactions
emojis = ['üëç', 'üíÄ', '‚ù§Ô∏è', 'üî•', 'üëè', 'üê∑', 'üò¢', 'üòé', 'üë®‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®', 'üëâüëå']

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def update_user_profile(user):
    if user.id not in user_data:
        user_data[user.id] = {
            'username': user.username,
            'first_name': user.first_name,
            'personal_facts': [],
            'chat_style': [],
            'last_interaction': datetime.now()
        }
    user_data[user.id]['last_interaction'] = datetime.now()
    save_user_data()

# –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∏–ª—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def analyze_style(message):
    style = []
    if len(message) > 100:
        style.append("–±–∞–≥–∞—Ç–æ—Å–ª—ñ–≤–Ω–∏–π")
    if any(word in message.lower() for word in ['lol', '—Ö–∞—Ö–∞']):
        style.append("–∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–∏–π")
    return ', '.join(style) if style else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"

# –í–∏–ª—É—á–µ–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def extract_facts(message):
    facts = []
    if '–Ω–∞—Ä–æ–¥–∏–≤—Å—è' in message:
        facts.append("–¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
    if '–ª—é–±–ª—é' in message:
        facts.append("–≤–ø–æ–¥–æ–±–∞–Ω–Ω—è")
    return facts

# Handle messages
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global chat_history
    user = update.message.from_user
    message = update.message.text

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
    await update_user_profile(user)
    
    # –ê–Ω–∞–ª—ñ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    user_data[user.id]['chat_style'].append(analyze_style(message))
    user_data[user.id]['personal_facts'].extend(extract_facts(message))
    
    # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    chat_history.append({
        "timestamp": datetime.now(),
        "message": message,
        "user_id": user.id
    })

    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    user_info = "–Ω–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    if user.username and user.username in USERS_INFO:
        user_info = f"{user.username} ({USERS_INFO[user.username]['name']})"
    
    context_messages = [{
        "role": "system",
        "content": f"""
            {default_role}
            
            –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_info}
            
            –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–∞—Ç—É:
            {', '.join([f"@{username} - {info['name']}" for username, info in USERS_INFO.items()])}
            
            –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:
            - @oleksiiriepkin –º–æ–∂–Ω–∞ –Ω–∞–∑–∏–≤–∞—Ç–∏ "–ë–∞—Ç—è"
            - @beach_face –º–æ–∂–Ω–∞ –Ω–∞–∑–∏–≤–∞—Ç–∏ "–°–æ–ª–æ–¥–∫–∞ –¥—É–ø–∫–∞"
            - @lil_triangle –º–æ–∂–Ω–∞ –Ω–∞–∑–∏–≤–∞—Ç–∏ "–î—î–¥"
            
            –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, —â–æ–± –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –ª—é–¥–µ–π –ø–æ —ñ–º–µ–Ω—ñ, —è–∫—â–æ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ —Ä–æ–∑–º–æ–≤–∏.
            
            –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ {user.first_name}:
            - –°—Ç–∏–ª—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è: {user_data[user.id]['chat_style'][-1]}
            - –í—ñ–¥–æ–º—ñ —Ñ–∞–∫—Ç–∏: {', '.join(user_data[user.id]['personal_facts'][-3:])}
        """
    }]
    context_messages += [{"role": "user", "content": msg['message']} for msg in chat_history[-10:]]

    # –£–º–æ–≤–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    should_respond = (
        '–¥–∞—Ä–∏–Ω–∞' in message.lower() or
        f"@{context.bot.username.lower()}" in message.lower() or
        (update.message.reply_to_message and 
         update.message.reply_to_message.from_user.id == context.bot.id)
    )

    if should_respond or random.random() < 0.001:
        await context.bot.send_chat_action(update.effective_chat.id, action="typing")
        response_text = await generate_response(context_messages)
        await update.message.reply_text(response_text, reply_to_message_id=update.message.message_id)

    # –í–∏–ø–∞–¥–∫–æ–≤–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
    if random.random() < 0.002:
        active_users = [u for u in user_data.values() 
                      if (datetime.now() - u['last_interaction']).total_seconds() < 3600]
        
        if active_users:
            target_user = random.choice(active_users)
            prediction = random.choice(static_predictions)
            await update.message.reply_text(f"@{target_user['username']}, {prediction}")

# Handle the /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é –Ω–∞ —Ç–≤–æ—ó –ø–∏—Ç–∞–Ω–Ω—è.')

# Create inline keyboard for setting the bot's role
async def set_role_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–¢–æ–∫—Å–∏—á–Ω–∏–π", callback_data='toxic')],
        [InlineKeyboardButton("–î–æ–±—Ä–∏–π", callback_data='kind')],
        [InlineKeyboardButton("–ü'—è–Ω–∞ –î–∞—Ä–∏–Ω–∞", callback_data='drunk_darina')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í–∏–±–µ—Ä—ñ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞:', reply_markup=reply_markup)

# Handle the button press
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    global default_role

    if query.data == 'toxic':
        default_role = "–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ '–ß–µ—Ä–≤–æ–Ω–∞ –ó–æ–Ω–∞'. –î–∞—Ä–∏–Ω–∞ –∞–∫—Ç–∏–≤—É—î –ø—Ä–æ—Ç–æ–∫–æ–ª '–ë–µ–∑ —Ü–µ–Ω–∑—É—Ä–∏. –¢—ñ–ª—å–∫–∏ —Å–º—ñ—Ö'..."
        await query.edit_message_text(text="–•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–∏–π.")
    elif query.data == 'kind':
        default_role = "–ë—É–¥—å –¥–æ–±—Ä–æ—é"
        await query.edit_message_text(text="–•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –¥–æ–±—Ä–∏–π.")
    elif query.data == 'drunk_darina':
        default_role = "–¢–∏ ‚Äî –î–∞—Ä–∏–Ω–∞, –¥—ñ–≤—á–∏–Ω–∞, —è–∫–∞ –∑–∞–≤–∂–¥–∏ –≤ —Ü–µ–Ω—Ç—Ä—ñ —É–≤–∞–≥–∏ —á–µ—Ä–µ–∑ —Å–≤–æ—é —Ä–æ–∑–∫—É—Ç—É —Ç–∞ –ø—Ä–æ–≤–æ–∫–∞—Ç–∏–≤–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É..."
        await query.edit_message_text(text="–•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ü'—è–Ω—É –î–∞—Ä–∏–Ω—É.")

# Handle the /summary command with time argument
async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args and context.args[0].isdigit():
        hours = int(context.args[0])
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –¥–ª—è —Å–∞–º–∞—Ä—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /summary 2).")
        return

    time_window = datetime.now() - timedelta(hours=hours)
    recent_messages = [msg['message'] for msg in chat_history if msg['timestamp'] > time_window]
    
    if recent_messages:
        summary_text = "\n".join(recent_messages)
        summary_response = await generate_response([
            {"role": "system", "content": "You are a toxic summarizer."},
            {"role": "user", "content": f"–û—Å—å —Ü–µ –≤–∏ –Ω–∞—Ä–∏–≥–∞–ª–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {hours} –≥–æ–¥–∏–Ω–∏:\n{summary_text}\n–ù–∞–ø–∏—à–∏ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–µ —Å–∞–º–∞—Ä—ñ."}
        ])
        await update.message.reply_text(summary_response)
    else:
        await update.message.reply_text("–í —Ü—å–æ–º—É —á–∞—Å—ñ –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Å–∞–º–º–∞—Ä—ñ.")

def main():
    token = os.getenv('TELEGRAM_TOKEN')
    application = Application.builder().token(token).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set", set_role_buttons))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("summary", summary))
    application.add_handler(CallbackQueryHandler(button))

    # Start the bot
    application.run_polling()

if __name__ == '__main__':
    main()
