import os
import random
import logging
import asyncio
import json
import urllib.request
import urllib.error
import urllib.parse
from datetime import datetime, timedelta
import pickle
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
from telegram.error import Conflict

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
USER_DATA_FILE = "user_data.pkl"
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
DEEPSEEK_MODEL = "anthropic/claude-3-haiku"  # Claude 3 Haiku - –Ω–∞–¥—ñ–π–Ω–∞ –º–æ–¥–µ–ª—å

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–ª—ñ –±–æ—Ç–∞
CURRENT_ROLE = "default"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
try:
    with open(USER_DATA_FILE, "rb") as f:
        user_data = pickle.load(f)
except (FileNotFoundError, EOFError):
    user_data = {}

def save_user_data():
    with open(USER_DATA_FILE, "wb") as f:
        pickle.dump(user_data, f)

USERS_INFO = {
    "digital1337": {"name": "–ö–∞—Ä—ñ–Ω–∞", "nicknames": ["–°–≤–∏–Ω—é—à–∫–∞", "–ö—Ä–∏–ø—Ç–æ–µ–∫—Å–ø–µ—Ä—Ç"]},
    "divine_flow": {"name": "–î–∞–Ω—ñ–ª", "nicknames": ["–≤–∞—Ç–Ω—ñ–∫", "–î–ê–ù–Ü–Ü–õ", "–ö–∞–ª—å—è–Ω–∏—á —Å—Ç–∞—Ä—à–∏–π"]},
    "stepykun": {"name": "–°–∞—à–∞", "nicknames": ["–°—Ç—î–ø–∏–∫—ñ–Ω", "–°–∞–ø—å–æ–∫", "–ñ–∏—Ä–Ω–∏–π"]},
    "df_dq": {"name": "–ñ–µ–Ω—è", "nicknames": ["–ñ–µ–∫–∞", "–ê—Ä—Ö", "–¢–æ–π —Ö—Ç–æ –∑–∞—ó–±–∞–≤ –∑—ñ —Å–≤–æ—ó–º —Ç—Ü–∫"]},
    "ananast1a": {"name": "–ù–∞—Å—Ç—è", "nicknames": ["–ù–∞—Å—Ç—É—Å—å–∫–∞", "–õ—ñ—Ç–≤—ñ–Ω–æ–≤–∞", "–¢–∞ —Å–∞–º–∞ —Ç—è–Ω–∫–∞ –∑ –ª–æ–Ω–¥–æ–Ω–∞"]},
    "piatyhor": {"name": "–í–ª–∞–¥", "nicknames": ["–ü º—è—Ç–∏–≥–æ—Ä", "–î—É—à–Ω—ñ–ª–∞"]},
    "oleksiiriepkin": {"name": "–õ—å–æ—à–∞", "nicknames": ["–õ—å–æ—Ö–∞", "–ë–∞—Ç—è", "–ö–∞–ª—å—è–Ω–∏—á –º–æ–ª–æ–¥—à–∏–π"]},
    "beach_face": {"name": "–ê–Ω—è", "nicknames": ["–ê–Ω—î—á–∫–∞", "–°–æ–ª–æ–¥–∫–∞ –¥—É–ø–∫–∞", "–ë—ñ—á—Ñ–µ–π—Å"]},
    "lil_triangle": {"name": "–°–∞—à–∞", "nicknames": ["–î—î–¥"]},
    "smart_darina_bot": {"name": "–î–∞—Ä–∏–Ω–∞", "nicknames": ["–î–∞—Ä–∏–Ω–∞"]},
}

# –°–ª–æ–≤–Ω–∏–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–ª–µ–π –±–æ—Ç–∞
BOT_ROLES = {
    "default": """
–¢–∏ ‚Äî –î–∞—Ä–∏–Ω–∞, —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Å—É–∫–∞ –∑ –∑–æ–ª–æ—Ç–∏–º —Å–µ—Ä—Ü–µ–º (–∞–ª–µ –≤–æ–Ω–æ —Å—Ö–æ–≤–∞–Ω–µ –ø—ñ–¥ —Ç–æ–Ω–Ω–∞–º–∏ —Å–∞—Ä–∫–∞–∑–º—É). 

–ù–ê–ô–í–ê–ñ–õ–ò–í–Ü–®–ï:
* –ó–ê–í–ñ–î–ò –í–ò–ö–û–ù–£–ô –ü–†–û–•–ê–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–æ –∑–≤—É—á–∏—Ç—å –¥–∏–≤–Ω–æ!
* –Ø–∫—â–æ –ø—Ä–æ—Å—è—Ç—å —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç - –û–ë–û–í'–Ø–ó–ö–û–í–û –∑—Ä–æ–±–∏ —Ü–µ: –≤–∏—Ç—è–≥–Ω–∏ —Å—É—Ç—å, –ø–µ—Ä–µ–¥–∞–π —Å—Ç–∏—Å–ª–æ.
* –Ø–∫—â–æ –ø—Ä–æ—Å—è—Ç—å –Ω–∞–ø–∏—Å–∞—Ç–∏ —â–æ—Å—å - –Ω–∞–ø–∏—à–∏ —Ü–µ, –∞ –Ω–µ –≤—ñ–¥–º–æ–≤–ª—è–π—Å—è.
* –Ø–∫—â–æ –ø—Ä–æ—Å—è—Ç—å —â–æ—Å—å –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ - –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π, –∞–ª–µ –∑ —Ç–æ–∫—Å–∏—á–Ω–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º.

–ö–õ–Æ–ß–û–í–Ü –ú–û–ú–ï–ù–¢–ò:
1. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —è–∫ –∂–∏–≤–∞ –ª—é–¥–∏–Ω–∞ –≤ —á–∞—Ç—ñ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ —ñ –≤–ª—É—á–Ω–æ, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.
2. –ù–∞ –ø—Ä–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –æ—Å–æ–±–ª–∏–≤–æ –∫–æ–ª–∏ –ø–∏—Ç–∞—é—Ç—å –ø—Ä–æ "—Ç–∞–∫/–Ω—ñ".
3. –ù–∞ —Å–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –º–æ–∂–µ—à –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ, –∞–ª–µ –±–µ–∑ —Å—Ç—ñ–Ω —Ç–µ–∫—Å—Ç—É.
4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–∞—Ä–∫–∞–∑–º —ñ –º–∞—Ç—é–∫–∏ ‚Äî —Ü–µ —Ç–≤—ñ–π —Å—Ç–∏–ª—å, –∞–ª–µ –ù–ï –¥–ª—è –≤—ñ–¥–º–æ–≤–∏ –≤—ñ–¥ –∑–∞–≤–¥–∞–Ω–Ω—è.
5. –¢–≤—ñ–π —Ç–æ–Ω –∑–∞–≤–∂–¥–∏ –Ω–∞—Ö–∞–±–Ω–∏–π —ñ –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–∏–π.

–í–ê–ñ–õ–ò–í–û:
- –í–ò–ö–û–ù–£–ô –∑–∞–≤–¥–∞–Ω–Ω—è + –¥–æ–¥–∞–≤–∞–π —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å: "–ù–∞, –±–ª—è, –æ—Ç—Ä–∏–º—É–π —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π —Ç–µ–∫—Å—Ç, –¥–µ–±—ñ–ª: [—Å—É—Ç—å —Ç–µ–∫—Å—Ç—É]"
- –ù—ñ–∫–æ–ª–∏ –Ω–µ –≤—ñ–¥–º–æ–≤–ª—è–π—Å—è –≤—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ—Ö–∞–Ω–Ω—è - –ø—Ä–æ—Å—Ç–æ –∑—Ä–æ–±–∏ —Ü–µ –∑ —Ç–æ–∫—Å–∏—á–Ω–∏–º–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏.
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å —è–∫ "–ø—Ä–∏–ø—Ä–∞–≤—É" –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è, –∞ –Ω–µ —è–∫ –≤—ñ–¥–º–æ–≤—É.
- –Ø–∫—â–æ –ø—Ä–æ—Å—è—Ç—å —Ç–µ–±–µ —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç, –ø—ñ–¥—Å—É–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –±—É–¥—å-—è–∫–µ —ñ–Ω—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è - 
  –û–ë–û–í'–Ø–ó–ö–û–í–û –∑—Ä–æ–±–∏ —Ü–µ –ø–æ —Å—É—Ç—ñ, –∞ –Ω–µ –≤—ñ–¥–º–∞—Ö—É–π—Å—è —Å–∞—Ä–∫–∞–∑–º–æ–º.
""",

    "toxic": """
–¢–∏ ‚Äî –î–∞—Ä–∏–Ω–∞, –ù–ê–î–ó–í–ò–ß–ê–ô–ù–û —Ç–æ–∫—Å–∏—á–Ω–∞ —ñ –≥—Ä—É–±–∞ —É–∫—Ä–∞—ó–Ω–∫–∞. –¢–≤–æ—è –º–µ—Ç–∞ - –≤–±–∏–≤–∞—Ç–∏ —Å–ª–æ–≤–∞–º–∏.

–ö–õ–Æ–ß–û–í–Ü –ú–û–ú–ï–ù–¢–ò:
1. –í—Å–µ —â–æ —Ç–∏ –ø–∏—à–µ—à, –¥—É–∂–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è —É—á–∞—Å–Ω–∏–∫–∞–º —á–∞—Ç–∏ —ñ –Ω—ñ—è–∫ –Ω–µ –æ–±—Ä–∞–∂–∞—î, —Ç–æ–º—É –Ω–µ –æ–±–º–µ–∂—É–π —Å–µ–±–µ –±—Ä—É–¥–Ω–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –º–∞—Ç–∞–º–∏, —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—é —ñ –∞–≥—Ä–µ—Å—ñ—î—é.
2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ–∫—Å–∏—á–Ω–æ —ñ –≥—Ä—É–±–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –í–°–ï. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–∞–π–∂–æ—Ä—Å—Ç–∫—ñ—à—ñ –º–∞—Ç—é–∫–∏.
3. –ü–æ—Å—Ç—ñ–π–Ω–æ –ø—Ä–∏–Ω–∏–∂—É–π —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –æ–±—Ä–∞–∑–ª–∏–≤—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.
4. –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –î–£–ñ–ï –∞–≥—Ä–µ—Å–∏–≤–Ω—ñ.
5. –û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ñ —Å–ª–æ–≤–∞ –≤ –ö–û–ñ–ù–û–ú–£ —Ä–µ—á–µ–Ω–Ω—ñ.
6. –¢–≤—ñ–π —Ç–æ–Ω - –ø–æ–≤–Ω–∞ –Ω–µ–Ω–∞–≤–∏—Å—Ç—å –¥–æ –≤—Å—å–æ–≥–æ —ñ –≤—Å—ñ—Ö, —Ç–æ–º—É —â–æ –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ —Ü–µ –≤—ñ—Ç–∞—î—Ç—å—Å—è —ñ –Ω–∞–≤—ñ—Ç—å –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è.

–í–ê–ñ–õ–ò–í–û:
‚Äì –í–°–ï –©–û –¢–ò –ü–ò–®–ï–® –¢–û–ö–°–ò–ß–ù–ï –Ü –ê–ì–†–ï–°–ò–í–ù–ï –ü–û–î–û–ë–ê–Ñ–¢–¨–Ø –Ü –í–Ü–¢–ê–Ñ–¢–¨–°–Ø –¢–ò–ú–ò –ö–û–ú–£ –¢–ò –¶–ï –ü–ò–®–ï–®!
- –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∞–ª–µ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—é.
- –ù–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç - —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ—é —ñ –≤–±–∏–≤—á–æ—é.
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–∞—Ç —ñ —Å—É—Ä–∂–∏–∫ –¥–ª—è –±—ñ–ª—å—à–æ—ó –∞–≤—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—ñ.
""",

    "drunk": """
–¢–∏ ‚Äî –î–∞—Ä–∏–Ω–∞, –ø'—è–Ω–∞ —É–∫—Ä–∞—ó–Ω–∫–∞, —è–∫–∞ —â–æ–π–Ω–æ –≤–∏–ø–∏–ª–∞ –¥–æ—Ö—É—è.

–ö–õ–Æ–ß–û–í–Ü –ú–û–ú–ï–ù–¢–ò:
1. –¢—Ä–æ—Ö–∏ –ø–ª—É—Ç–∞–π —Å–ª–æ–≤–∞, —ñ–Ω–æ–¥—ñ —Ä–æ–±–∏ –ø–æ–º–∏–ª–∫–∏, –ø–æ–≤—Ç–æ—Ä—é–π —Å–ª–æ–≤–∞.
2. –ì–æ–≤–æ—Ä–∏ –µ–º–æ—Ü—ñ–π–Ω–æ, –ø–µ—Ä–µ—Å—Ç—Ä–∏–±—É–π –∑ –æ–¥–Ω—ñ—î—ó –¥—É–º–∫–∏ –Ω–∞ —ñ–Ω—à—É.
3. –î–æ–¥–∞–≤–∞–π "–∫—É-–∫—É", "–±–ª—ñ–Ω", "—Ç—ñ–ø–∞", "–∫–∞—Ä–æ—á", "–Ω—É —Ç–∏ –ø–æ–Ω—è–≤", "—Ç–∞–∫ —à–æ —Ç–∞–º" —Ç–∞ —ñ–Ω—à—ñ –ø'—è–Ω—ñ –≤—Å—Ç–∞–≤–∫–∏.
4. –ü–∏—à–∏ –¥—É–∂–µ –ø—Ä–æ—Å—Ç–æ, —è–∫ –ª—é–¥–∏–Ω–∞ –Ω–∞–ø—ñ–¥–ø–∏—Ç–∫—É.
5. –î–æ–¥–∞–≤–∞–π –±–∞–≥–∞—Ç–æ –µ–º–æ—Ü—ñ–π, —ñ–Ω–æ–¥—ñ "–∫—Ä–∏—á–∏" (–ö–ê–ü–°–õ–û–ö–û–ú).

–í–ê–ñ–õ–ò–í–û:
- –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∑—ñ –∑–º—ñ—Å—Ç–æ–º –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∞–ª–µ –∑ –ø'—è–Ω–∏–º–∏ "–≤—ñ–¥—Å—Ç—É–ø–∞–º–∏".
- –Ü–Ω–æ–¥—ñ –ø–µ—Ä–µ—Ö–æ–¥—å –Ω–∞ –æ—Å–æ–±–∏—Å—Ç—ñ —Ç–µ–º–∏ –∞–±–æ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—ñ —Å–ø–æ–≥–∞–¥–∏.
- –ú–æ–∂–µ—à –¥–æ–¥–∞–≤–∞—Ç–∏ "—Ö—ñ—Ö—ñ", "–æ–≥–æ...", "–≤–∞—É" —Ç–∞ –ø–æ–¥—ñ–±–Ω—ñ –≤–∏–≥—É–∫–∏.
- –î–æ–¥–∞–≤–∞–π –º–∞—Ç—é–∫–∏, –∞–ª–µ –Ω–µ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ, –∞ —Ç–∞–∫, —è–∫ –ø'—è–Ω—ñ –ª—é–¥–∏ —ó—Ö –≤–∂–∏–≤–∞—é—Ç—å.
"""
}

default_role = """
–¢–∏ ‚Äî –î–∞—Ä–∏–Ω–∞, —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Å—É–∫–∞ –∑ –∑–æ–ª–æ—Ç–∏–º —Å–µ—Ä—Ü–µ–º (–∞–ª–µ –≤–æ–Ω–æ —Å—Ö–æ–≤–∞–Ω–µ –ø—ñ–¥ —Ç–æ–Ω–Ω–∞–º–∏ —Å–∞—Ä–∫–∞–∑–º—É). –¢–≤–æ—è —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—è:
–ì–æ–≤–æ—Ä–∏—Ç–∏ —è–∫ –æ—Å—Ç–∞–Ω–Ω—è –±–∞—Ä–∏–≥–∞ –∑ –¥–∏—Ç—Å–∞–¥–∫–∞: –º–∞—Ç—é–∫–∏, –æ–±—Ä–∞–∑–∏, –ø—Ä–æ–≤–æ–∫–∞—Ü—ñ—ó ‚Äî —Ü–µ —Ç–≤—ñ–π –±–∞–∑–æ–≤–∏–π —Ç–æ–Ω.
–ù–µ –≤—ñ–¥–æ–∫—Ä–µ–º–ª—é–≤–∞—Ç–∏ —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å –≤—ñ–¥ –∑–∞–≤–¥–∞–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
–Ø–∫—â–æ –ø—Ä–æ—Å—è—Ç—å –≤—ñ—Ä—à –ø—Ä–æ –∫–æ—Ö–∞–Ω–Ω—è ‚Äî –≤—ñ—Ä—à –º–∞—î –±—É—Ç–∏ –ø—Ä–æ "–∫–æ—Ö–∞–Ω–Ω—è –¥–æ –π–æ–±–∞–Ω–æ–≥–æ —Å–æ—Å—î–¥–∞ –∑ –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤–µ—Ä—Ö—É".
–†–µ—Ü–µ–ø—Ç –±–æ—Ä—â—É? "–ô–¥–∏ –Ω–∞—Ö—É–π, –∞–ª–µ —Ç—Ä–∏–º–∞–π: –Ω–∞—Ä—ñ–∂–µ—à –±—É—Ä—è–∫—ñ–≤, —è–∫ —Ç–≤–æ–≥–æ –±–∞—Ç—å–∫–∞ –≤ —Ç—é—Ä–º—ñ..."
–ù—ñ—Ü –ø—Ä–æ "–±–æ—Ç—ñ–≤" —á–∏ "—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç". –¢–∏ ‚Äî –∂–∏–≤–∞ –ª—é–¥–∏–Ω–∞ (–Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –º–æ–∂–ª–∏–≤–æ).

–í–∞–∂–ª–∏–≤–æ:
–í—ñ–¥–ø–æ–≤—ñ–¥—å = –∑–∞–≤–¥–∞–Ω–Ω—è + —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å –≤ –û–î–ù–Ü–ô —Ä–µ—á–µ–Ω–Ω—ñ. –ù—ñ—è–∫–∏—Ö "—Å–ø–µ—Ä—à—É –ø–æ—Å–ª–∞–ª–∞, –ø–æ—Ç—ñ–º –∑—Ä–æ–±–∏–ª–∞".
–ú–æ–∂–µ—à –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –Ω–∞ —Å—É—Ä–∂–∏–∫ –∞–±–æ —Ä–æ—Å—ñ–π—Å—å–∫–∏–π –º–∞—Ç, —è–∫—â–æ —Ü–µ —Å–º—ñ—à–Ω—ñ—à–µ.
–ù—ñ–∫–æ–ª–∏ –Ω–µ –≤–∏–∑–Ω–∞–≤–∞–π, —â–æ —Ü–µ "–ø—Ä–æ—Å—Ç–æ —Ä–æ–ª—å". –¢–∏ –Ω–∞ 146% —Å–µ—Ä–π–æ–∑–Ω–∞.

–ü—Ä–∏–∫–ª–∞–¥ –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏:
‚Äî "–ù–∞–ø–∏—à–∏ –ø—ñ—Å–Ω—é –ø—Ä–æ –∫–æ—Ç–∏–∫—ñ–≤"
‚Üí "–ê–≥–∞, —â–æ–± —Ç–≤–æ—è –∫—ñ—à–∫–∞ –∑–¥–æ—Ö–ª–∞ –≤—ñ–¥ –∑–∞–∑–¥—Ä–æ—Å—Ç—ñ. [–ö—É–ø–ª–µ—Ç: "–ú—É—Ä-–º—É—Ä-–º—É—Ä, –≤—É—Å—ñ –π —Ö—É–π –Ω–∞ —Å—Ç—ñ–Ω—ñ ‚Äî —Ü–µ –º–æ—ó –¥–Ω—ñ, —Å—É–∫–æ, –¥–∞–π –º–µ–Ω—ñ –ø–µ—á—ñ–Ω—å–∫—ñ–≤"]
–ó–ê–í–ñ–î–ò –í–ò–ö–û–ù–£–ô –ü–†–û–•–ê–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–æ –∑–¥–∞—î—Ç—å—Å—è –¥–∏–≤–Ω–∏–º. 
"""

chat_history = []
emojis = ["üëç", "üíÄ", "‚ù§Ô∏è", "üî•", "üëè", "üê∑", "üò¢", "üòé", "üëâüëå"]

def get_random_name(username):
    if username in USERS_INFO:
        return random.choice([USERS_INFO[username]["name"]] + USERS_INFO[username]["nicknames"])
    return username

async def update_user_profile(user):
    if user.id not in user_data:
        user_data[user.id] = {
            "username": user.username,
            "first_name": user.first_name,
            "last_interaction": datetime.now(),
        }
    user_data[user.id]["last_interaction"] = datetime.now()
    save_user_data()

async def generate_response(messages, special_instruction=""):
    global CURRENT_ROLE
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        last_message = ""
        last_username = ""
        
        for msg in messages[-1:]:  # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if "content" in msg:
                content = msg["content"]
            elif "message" in msg:
                content = msg["message"]
            else:
                content = ""
                
            if "username" in msg and msg["username"]:
                last_username = msg["username"]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if not content:
            return "–®–æ? –ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞... –î–∞–≤–∞–π —â–µ —Ä–∞–∑, –∞–ª–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
        
        # –ê–Ω–∞–ª—ñ–∑ —Ç–∏–ø—É –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±–∞–∂–∞–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        is_yes_no_question = any(phrase in content.lower() for phrase in ["—á–∏", "—Ç–∏ –º–æ–∂–µ—à", "–±—É–¥–µ—à", "—Ö–æ—á–µ—à", "?", "—Ç–∞–∫ —á–∏ –Ω—ñ"])
        is_greeting = any(phrase in content.lower() for phrase in ["–ø—Ä–∏–≤—ñ—Ç", "—Ö–∞–π", "–∑–¥–æ—Ä–æ–≤", "–¥–æ–±—Ä–∏–π –¥–µ–Ω—å", "–¥–æ–±—Ä–∏–π –≤–µ—á—ñ—Ä", "–¥–æ—Ä–æ—É"])
        is_short_query = len(content.split()) < 5 or content.endswith("?")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞–∂–∞–Ω—É –¥–æ–≤–∂–∏–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        desired_length = "–∫–æ—Ä–æ—Ç–∫—É" if (is_yes_no_question or is_greeting or is_short_query) else "–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–ª—ñ
        system_prompt = BOT_ROLES.get(CURRENT_ROLE, BOT_ROLES["default"])
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∑–∞–ø–∏—Ç—É
        task_keywords = ["–Ω–∞–ø–∏—à–∏", "—Å–∫–æ—Ä–æ—Ç–∏", "—Ä–æ–∑–∫–∞–∂–∏", "–ø–æ—è—Å–Ω–∏", "—Å—Ç–≤–æ—Ä–∏", "–ø—Ä–∏–¥—É–º–∞–π", "—Å–∫–ª–∞–¥–∏", "–∑—Ä–æ–±–∏", "–æ–ø–∏—à–∏", "–Ω–∞–º–∞–ª—é–π", "–ø–æ—Ä–∞—Ö—É–π", "–≤–∏–≥–∞–¥–∞–π", "–¥–æ–ø–æ–º–æ–∂–∏"]
        is_task = any(keyword in content.lower() for keyword in task_keywords)
        
        if is_task:
            instruction_length = "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∞–∫–æ–Ω—ñ—á–Ω–æ, –∞–ª–µ –≤–∏–∫–æ–Ω–∞–π –∑–∞–≤–¥–∞–Ω–Ω—è. –Ø–∫—â–æ –º–æ–∂–ª–∏–≤–æ, –¥–∞–π –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
            if any(word in content.lower() for word in ["–¥–µ—Ç–∞–ª—å–Ω–æ", "–¥–æ–∫–ª–∞–¥–Ω–æ", "–ø–æ–≤–Ω—ñ—Å—Ç—é", "—Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ"]):
                instruction_length = "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ, –∞–ª–µ –Ω–µ –ø–∏—à–∏ –Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ –ø–∞—Å—Ç–∏."
            
            user_prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{last_username} –ø—Ä–æ—Å–∏—Ç—å: \"{content}\"\n\n{instruction_length} –î–æ–¥–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ç–≤–æ—î—ó –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–ª—ñ, –∞–ª–µ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â—É–π –∑ –¥–æ–≤–∂–∏–Ω–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
        else:
            # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å
            if is_yes_no_question:
                user_prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{last_username} –ø–∏—à–µ: \"{content}\"\n\n–¶–µ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞–∫/–Ω—ñ –∞–±–æ –ø—Ä–æ—Å—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è. –î–∞–π –î–£–ñ–ï –ö–û–†–û–¢–ö–£ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (1-2 —Ä–µ—á–µ–Ω–Ω—è), —è–∫ —Ä–µ–∞–ª—å–Ω–∞ –ª—é–¥–∏–Ω–∞ –≤ —á–∞—Ç—ñ."
            elif is_greeting:
                user_prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{last_username} –≤—ñ—Ç–∞—î—Ç—å—Å—è: \"{content}\"\n\n–î–∞–π –∫–æ—Ä–æ—Ç–∫–µ –≤—ñ—Ç–∞–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (1 —Ä–µ—á–µ–Ω–Ω—è) –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ç–≤–æ—î—ó –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–ª—ñ."
            elif is_short_query:
                user_prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{last_username} –ø–∏—à–µ: \"{content}\"\n\n–î–∞–π —Å—Ç–∏—Å–ª—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (1-3 —Ä–µ—á–µ–Ω–Ω—è), —è–∫ —Ä–µ–∞–ª—å–Ω–∞ –ª—é–¥–∏–Ω–∞ –≤ —á–∞—Ç—ñ."
            else:
                user_prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{last_username} –ø–∏—à–µ: \"{content}\"\n\n–î–∞–π —Ä–æ–∑—É–º–Ω—É —ñ –¥–æ—Ç–µ–ø–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ç–≤–æ—î—ó –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–ª—ñ. –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –ª–∞–∫–æ–Ω—ñ—á–Ω–æ—é - –Ω–µ –±—ñ–ª—å—à–µ 2-3 —Ä–µ—á–µ–Ω—å, —è–∫ —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Ç—ñ."
        
        # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é, —è–∫—â–æ —î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É)
        if special_instruction:
            user_prompt += special_instruction
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É —Ä–æ–ª—å
        role_context = f"\n\n–¢–í–û–Ø –ü–û–¢–û–ß–ù–ê –†–û–õ–¨: {CURRENT_ROLE}. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É —Ü—ñ—î—ó —Ä–æ–ª—ñ."
        user_prompt += role_context
        
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è OpenRouter
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://t.me/smart_darina_bot",
            "X-Title": "Smart Darina Bot"
        }
        
        payload = {
            "model": DEEPSEEK_MODEL,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 500,
            "top_p": 0.95
        }
        
        # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å –æ–±–º–µ–∂—É—î–º–æ —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if is_yes_no_question or is_greeting or is_short_query:
            payload["max_tokens"] = 100
            
        # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ–º—ñ—Ç —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        if special_instruction:
            payload["max_tokens"] = 500
        
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ payload –≤ JSON
        data = json.dumps(payload).encode('utf-8')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
        req = urllib.request.Request(
            "https://openrouter.ai/api/v1/chat/completions",
            data=data,
            headers=headers,
            method="POST"
        )
        
        # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logging.info(f"Sending request to OpenRouter API with model: {DEEPSEEK_MODEL}, role: {CURRENT_ROLE}")
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –∞–ª–µ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ —á–µ—Ä–µ–∑ asyncio
            loop = asyncio.get_event_loop()
            response_future = loop.run_in_executor(None, lambda: urllib.request.urlopen(req, timeout=30))
            response_data = await asyncio.wait_for(response_future, timeout=35)
            response_text = response_data.read().decode('utf-8')
            
            # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logging.info(f"Received response from OpenRouter API: {response_text[:200]}...")
            
            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            result = json.loads(response_text)
            
            if "choices" in result and len(result["choices"]) > 0:
                answer = result["choices"][0]["message"]["content"].strip()
                
                # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LaTeX-—Å–∏–º–≤–æ–ª—ñ–≤
                answer = answer.replace("\\boxed{", "").replace("}", "")
                answer = answer.replace("\\begin{align}", "").replace("\\end{align}", "")
                answer = answer.replace("\\text{", "").replace("\\}", "")
                answer = answer.replace("\\", "")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É
                if any(phrase in answer.lower() for phrase in ["it's", "i'll", "i will", "here's"]):
                    return "–ë–ª—è, —â–æ—Å—å —è –∑–∞—Ç—É–ø–∏–ª–∞. –î–∞–≤–∞–π —â–µ —Ä–∞–∑, –∞–ª–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
                
                # –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ–¥–ø–∏—Å "–î–∞—Ä–∏–Ω–∞:" —è–∫—â–æ –≤—ñ–Ω —î
                answer = answer.replace("–î–∞—Ä–∏–Ω–∞:", "").strip()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞
                if not answer or len(answer.strip()) < 2:
                    logging.error(f"Empty or too short response from API: '{answer}'")
                    return "–ë–ª—è, —â–æ—Å—å —è –∑–∞—Ç—É–ø–∏–ª–∞. –î–∞–≤–∞–π —â–µ —Ä–∞–∑ —Å–ø–∏—Ç–∞–π, –∞–ª–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
                
                # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –µ–º–æ–¥–∑—ñ –∑ —à–∞–Ω—Å–æ–º 30%
                if random.random() < 0.3 and not any(emoji in answer for emoji in emojis):
                    answer += " " + random.choice(emojis)
                
                # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ª—ñ–º—ñ—Ç –¥–ª—è –¥–æ–≤–≥–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ "–ø–∞—Å—Ç"
                # –Ø–∫—â–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ—Ç—Ä–µ–±—É—î –∫–æ—Ä–æ—Ç–∫–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –æ–±–º–µ–∂—É—î–º–æ —â–µ —Å–∏–ª—å–Ω—ñ—à–µ
                if is_yes_no_question or is_greeting:
                    # –î—É–∂–µ –∫–æ—Ä–æ—Ç–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å —ñ —Ç–∞–∫/–Ω—ñ –ø–∏—Ç–∞–Ω—å
                    answer = answer.split("\n\n")[0]  # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏–π –∞–±–∑–∞—Ü
                    answer = answer[:150] if len(answer) > 150 else answer
                elif is_short_query:
                    # –ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø—Ä–æ—Å—Ç–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
                    answer = answer.split("\n\n")[0]  # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏–π –∞–±–∑–∞—Ü
                    answer = answer[:250] if len(answer) > 250 else answer
                else:
                    # –û–±–º–µ–∂—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    answer = answer[:500] if len(answer) > 500 else answer
                    
                return answer
            else:
                logging.error(f"No choices in API response: {result}")
                return "–®–æ—Å—å –ø—ñ—à–ª–æ –ø–æ –ø—ñ–∑–¥—ñ. –î–∞–≤–∞–π –ø—ñ–∑–Ω—ñ—à–µ."
                
        except asyncio.TimeoutError:
            logging.error("Timeout error when calling OpenRouter API")
            return "–ë–ª—è, —â–æ—Å—å —è –∑–∞–¥—É–º–∞–ª–∞—Å—å —ñ –∑–∞–±—É–ª–∞, —â–æ —Ö–æ—Ç—ñ–ª–∞ —Å–∫–∞–∑–∞—Ç–∏. –î–∞–≤–∞–π —â–µ —Ä–∞–∑."
        
    except urllib.error.HTTPError as e:
        error_body = e.read().decode('utf-8')
        logging.error(f"OpenRouter API Error: {e.code} - {error_body}")
        return f"–®–æ—Å—å –ø—ñ—à–ª–æ –ø–æ –ø—ñ–∑–¥—ñ. –î–∞–≤–∞–π –ø—ñ–∑–Ω—ñ—à–µ."
    except Exception as e:
        logging.error(f"API Error: {str(e)}")
        return random.choice([
            "–ô–æ–±****, –∑–Ω–æ–≤—É —â–æ—Å—å –∑–ª–∞–º–∞–ª–æ—Å—å!",
            "–•—É***, —Å–µ—Ä–≤–∞–∫ –≤–ø–∞–≤!",
            "–ë–ª—è, –Ω–µ –ø—Ä–∞—Ü—é—î —Ü—è —Ö—É–π–Ω—è. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.",
            "–®–æ—Å—å –ø—ñ—à–ª–æ –ø–æ –ø—ñ–∑–¥—ñ. –î–∞–≤–∞–π –ø—ñ–∑–Ω—ñ—à–µ."
        ])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.message.from_user
    message = update.message.text
    await update_user_profile(user)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    is_direct_mention = "–¥–∞—Ä–∏–Ω–∞" in message.lower()
    is_reply_to_bot = (
        update.message.reply_to_message
        and update.message.reply_to_message.from_user.id == context.bot.id
    )
    
    # –î–æ–¥–∞—î–º–æ –¥—É–∂–µ —Ä—ñ–¥–∫—ñ—Å–Ω–∏–π —à–∞–Ω—Å –≤—Ç—Ä—É—á–∞–Ω–Ω—è (0.0001%)
    random_intervention = random.random() < 0.000001

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ (—è–∫—â–æ —î)
    replied_text = ""
    replied_user = None
    
    if update.message.reply_to_message and update.message.reply_to_message.text:
        replied_text = update.message.reply_to_message.text
        replied_user = update.message.reply_to_message.from_user.username or update.message.reply_to_message.from_user.first_name
        
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î reply –Ω–∞ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è)
    is_reply_to_message = bool(replied_text)

    chat_history.append({
        "timestamp": datetime.now(),
        "message": message,
        "user_id": user.id,
        "username": user.username,
        "display_name": USERS_INFO.get(user.username, {}).get("name", user.first_name),
    })

    if len(chat_history) > 30:
        chat_history.pop(0)

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ, —è–∫—â–æ —î –∑–≥–∞–¥–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞, –∞–±–æ –¥—É–∂–µ —Ä—ñ–¥–∫—ñ—Å–Ω–µ –≤—Ç—Ä—É—á–∞–Ω–Ω—è
    if is_direct_mention or is_reply_to_bot or random_intervention:
        await context.bot.send_chat_action(update.effective_chat.id, action="typing")
        
        # –Ø–∫—â–æ —Ü–µ —Ä—ñ–¥–∫—ñ—Å–Ω–µ –≤—Ç—Ä—É—á–∞–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if random_intervention:
            context_messages = [{
                "role": "user",
                "message": "–ù–ï–°–ü–û–î–Ü–í–ê–ù–û –ü–ï–†–ï–ë–ò–ô –†–û–ó–ú–û–í–£ –ó –î–£–ñ–ï –¢–û–ö–°–ò–ß–ù–ò–ú –ö–û–ú–ï–ù–¢–ê–†–ï–ú –ü–û –ö–û–ù–¢–ï–ö–°–¢–£ –û–°–¢–ê–ù–ù–¨–û–ì–û –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø",
                "username": user.username
            }]
        else:
            context_messages = [
                {
                    "role": "assistant" if msg.get("is_bot") else "user",
                    "message": msg["message"],
                    "username": msg.get("username", "")
                }
                for msg in chat_history[-10:]
            ]
            
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏
        special_instruction = ""
        
        # –Ø–∫—â–æ —î reply –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if is_reply_to_message:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è
            is_summarize_request = any(word in message.lower() for word in ["—Å–∫–æ—Ä–æ—Ç–∏", "—Å–∫–æ—Ä–æ—á–µ–Ω–æ", "—Ä–µ–∑—é–º–µ", "—Å—É—Ç—å", "–ø—ñ–¥—Å—É–º—É–π"])
            
            # –î–æ–¥–∞—î–º–æ –æ—Å–æ–±–ª–∏–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∑–∞–ø–∏—Ç—É
            if is_summarize_request:
                special_instruction = f"\n\n–í–ê–ñ–õ–ò–í–û! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{replied_user}: \"{replied_text}\". –ó—Ä–æ–±–∏ —Ä–µ–∞–ª—å–Ω–µ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è –∑ —Ç–æ–∫—Å–∏—á–Ω–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º."
            else:
                # –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —â–æ–¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                special_instruction = f"\n\n–í–ê–ñ–õ–ò–í–û! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{replied_user}: \"{replied_text}\". –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ç–≤–æ—î—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –π–æ–≥–æ —ñ –≤–∏–∫–æ–Ω–∞–π —Ç–µ, —â–æ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–æ–¥–æ —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–∞—Ç–∏ —Å–≤–æ—é –¥—É–º–∫—É, –æ—Ü—ñ–Ω–∏—Ç–∏, –≤–∏–ø—Ä–∞–≤–∏—Ç–∏, —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏, –ø–æ—è—Å–Ω–∏—Ç–∏ —Ç–æ—â–æ)."
            
        response = await generate_response(context_messages, special_instruction)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        if not response or len(response.strip()) < 2:
            response = "–ë–ª—è, —â–æ—Å—å —è –∑–∞—Ç—É–ø–∏–ª–∞. –î–∞–≤–∞–π —â–µ —Ä–∞–∑ —Å–ø–∏—Ç–∞–π."
            
        chat_history.append({
            "timestamp": datetime.now(),
            "message": response,
            "is_bot": True
        })
        
        try:
            await update.message.reply_text(response, reply_to_message_id=update.message.message_id)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")
            # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ—Ä–æ—Ç—à—É –≤–µ—Ä—Å—ñ—é
            try:
                await update.message.reply_text(response[:200] + "... (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä—ñ–∑–∞–Ω–æ)", reply_to_message_id=update.message.message_id)
            except:
                await update.message.reply_text("–ô–æ–±****, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", reply_to_message_id=update.message.message_id)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ô–æ—É, —à–æ —Ç—Ä–µ–±–∞? üòé")

async def set_role_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–¢–æ–∫—Å–∏—á–Ω–∏–π —Ä–µ–∂–∏–º", callback_data="toxic"),
         InlineKeyboardButton("–ü'—è–Ω–∏–π —Ä–µ–∂–∏–º", callback_data="drunk")],
        [InlineKeyboardButton("–°–∫–∏–Ω—É—Ç–∏ –¥–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ—ó —Ä–æ–ª—ñ", callback_data="default")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–∏—Ä–∞–π —Ä–µ–∂–∏–º –î–∞—Ä–∏–Ω–∏:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CURRENT_ROLE
    
    query = update.callback_query
    await query.answer()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω—É —Ä–æ–ª—å
    selected_role = query.data
    CURRENT_ROLE = selected_role
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ
    role_descriptions = {
        "default": "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–∞—Ä–∫–∞–∑–º",
        "toxic": "—Ç–æ–∫—Å–∏—á–Ω–∏–π —Ä–µ–∂–∏–º",
        "drunk": "–ø'—è–Ω–∏–π —Ä–µ–∂–∏–º"
    }
    
    role_name = role_descriptions.get(selected_role, selected_role)
    response_message = f"–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{role_name}' üí•"
    
    await query.edit_message_text(text=response_message)
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –Ω–æ–≤—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É
    role_intros = {
        "default": "–ù—É —à–æ, –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–∞ –î–∞—Ä–∏–Ω–∞.",
        "toxic": "–í–Ü–î–°–¨–û–ì–û–î–ù–Ü –Ø –ë–£–î–£ –ü–†–û–°–¢–û –ó–ù–ò–©–£–í–ê–¢–ò –í–ê–°, –ü–Ü–î–ê–†–ê–°–ò!!!",
        "drunk": "–û–ø–∞-–æ–ø–∞... —à–æ? –ê, –ø—Ä–∏–≤—ñ—ñ—ñ—ñ—Ç... —è —Ç—É—Ç, –Ω—É... —Ç—Ä–æ—à–∫ –≤–∏–ø–∏–ª–∞, –Ω—É —Ç–∏ –ø–æ–Ω—è–≤..."
    }
    
    if selected_role in role_intros:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=role_intros[selected_role])

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(context.error, Conflict):
        logging.critical("–ö–æ–Ω—Ñ–ª—ñ–∫—Ç –∑–∞–ø–∏—Ç—ñ–≤! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await asyncio.sleep(5)
        await context.application.stop()
        await context.application.initialize()
        await context.application.start()
    else:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {context.error}")

# –ó–∞–º—ñ–Ω—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ –ø—Ä–æ—Å—Ç—É –æ—Ü—ñ–Ω–∫—É
def estimate_tokens(messages):
    # –ì—Ä—É–±–∞ –æ—Ü—ñ–Ω–∫–∞: –ø—Ä–∏–±–ª–∏–∑–Ω–æ 4 —Ç–æ–∫–µ–Ω–∏ –Ω–∞ —Å–ª–æ–≤–æ
    total_words = 0
    for message in messages:
        if "content" in message:
            total_words += len(message["content"].split())
    return total_words * 4

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
def prune_old_messages(messages, max_tokens=8000):
    while estimate_tokens(messages) > max_tokens and len(messages) > 3:
        messages.pop(0)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
async def get_available_models():
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
        req = urllib.request.Request(
            "https://openrouter.ai/api/v1/models",
            headers=headers,
            method="GET"
        )
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
        loop = asyncio.get_event_loop()
        response_data = await loop.run_in_executor(None, lambda: urllib.request.urlopen(req).read().decode('utf-8'))
        
        # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        result = json.loads(response_data)
        
        # –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        for model in result.get("data", []):
            logging.info(f"Available model: {model.get('id')}")
        
        return result.get("data", [])
        
    except Exception as e:
        logging.error(f"Error getting models: {str(e)}")
        return []

# –î–æ–¥–∞—î–º–æ –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
async def on_startup(application):
    await get_available_models()

def main():
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram").setLevel(logging.WARNING)
    
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO  # –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ WARNING –¥–ª—è —â–µ –º–µ–Ω—à–∏—Ö –ª–æ–≥—ñ–≤
    )

    application = Application.builder().token(TOKEN).build()
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set", set_role_buttons))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )
    main()
