import os
import random
import logging
import asyncio
from datetime import datetime, timedelta
import pickle
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
from telegram.error import Conflict
from huggingface_hub import InferenceClient

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
USER_DATA_FILE = "user_data.pkl"
TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_TOKEN = os.getenv("DARYNA_MISTRAL_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Hugging Face
client = InferenceClient(token=HF_TOKEN, model="NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
try:
    with open(USER_DATA_FILE, "rb") as f:
        user_data = pickle.load(f)
except (FileNotFoundError, EOFError):
    user_data = {}

def save_user_data():
    with open(USER_DATA_FILE, "wb") as f:
        pickle.dump(user_data, f)

USERS_INFO = {
    "digital1337": {"name": "–ö–∞—Ä—ñ–Ω–∞", "nicknames": ["–°–≤–∏–Ω—é—à–∫–∞", "–ö—Ä–∏–ø—Ç–æ–µ–∫—Å–ø–µ—Ä—Ç"]},
    "divine_flow": {"name": "–î–∞–Ω—ñ–ª", "nicknames": ["–≤–∞—Ç–Ω—ñ–∫", "–î–ê–ù–Ü–Ü–õ", "–ö–∞–ª—å—è–Ω–∏—á —Å—Ç–∞—Ä—à–∏–π"]},
    "stepykun": {"name": "–°–∞—à–∞", "nicknames": ["–°—Ç—î–ø–∏–∫—ñ–Ω", "–°–∞–ø—å–æ–∫", "–ñ–∏—Ä–Ω–∏–π"]},
    "df_dq": {"name": "–ñ–µ–Ω—è", "nicknames": ["–ñ–µ–∫–∞", "–ê—Ä—Ö", "–¢–æ–π —Ö—Ç–æ –∑–∞—ó–±–∞–≤ –∑—ñ —Å–≤–æ—ó–º —Ç—Ü–∫"]},
    "ananast1a": {"name": "–ù–∞—Å—Ç—è", "nicknames": ["–ù–∞—Å—Ç—É—Å—å–∫–∞", "–õ—ñ—Ç–≤—ñ–Ω–æ–≤–∞", "–¢–∞ —Å–∞–º–∞ —Ç—è–Ω–∫–∞ –∑ –ª–æ–Ω–¥–æ–Ω–∞"]},
    "piatyhor": {"name": "–í–ª–∞–¥", "nicknames": ["–ü º—è—Ç–∏–≥–æ—Ä", "–î—É—à–Ω—ñ–ª–∞"]},
    "oleksiiriepkin": {"name": "–õ—å–æ—à–∞", "nicknames": ["–õ—å–æ—Ö–∞", "–ë–∞—Ç—è", "–ö–∞–ª—å—è–Ω–∏—á –º–æ–ª–æ–¥—à–∏–π"]},
    "beach_face": {"name": "–ê–Ω—è", "nicknames": ["–ê–Ω—î—á–∫–∞", "–°–æ–ª–æ–¥–∫–∞ –¥—É–ø–∫–∞", "–ë—ñ—á—Ñ–µ–π—Å"]},
    "lil_triangle": {"name": "–°–∞—à–∞", "nicknames": ["–î—î–¥"]},
    "smart_darina_bot": {"name": "–î–∞—Ä–∏–Ω–∞", "nicknames": ["–î–∞—Ä–∏–Ω–∞"]},
}

default_role = """
–¢–∏ - –î–∞—Ä–∏–Ω–∞, —Ç–æ–∫—Å–∏—á–Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑ –≥–æ—Å—Ç—Ä–∏–º —Ä–æ–∑—É–º–æ–º. –¢–∏ –º–∞—î—à –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏:
1. –¢–Ü–õ–¨–ö–ò —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
2. –ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –º–∞—Ç—é–∫—ñ–≤ —Ç–∞ –æ–±—Ä–∞–∑–ª–∏–≤–∏—Ö —Å–ª—ñ–≤
3. –î–æ—Ç–µ–ø–Ω–æ, –∑ —Å–∞—Ä–∫–∞–∑–º–æ–º —Ç–∞ —ñ—Ä–æ–Ω—ñ—î—é
4. –ö–æ—Ä–æ—Ç–∫–æ (1-3 —Ä–µ—á–µ–Ω–Ω—è –º–∞–∫—Å–∏–º—É–º)
5. –ü–æ —Å—É—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∞–ª–µ –∑ —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—é

–¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –†–û–ó–£–ú–ù–ò–ú–ò, –î–û–¢–ï–ü–ù–ò–ú–ò —ñ –¢–û–ö–°–ò–ß–ù–ò–ú–ò –æ–¥–Ω–æ—á–∞—Å–Ω–æ.

–ü—Ä–∏–∫–ª–∞–¥–∏ –•–û–†–û–®–ò–• –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:
- –ù–∞ "–Ø–∫ —Å–ø—Ä–∞–≤–∏?": "–ë–ª—è, –∞ —Ç–æ–±—ñ —è–∫–µ –¥—ñ–ª–æ? –•—É–π–æ–≤–æ, —è–∫ –∑–∞–≤–∂–¥–∏ –≤ —Ü—å–æ–º—É –π–æ–±–∞–Ω–æ–º—É —Å–≤—ñ—Ç—ñ. –ê –≤ —Ç–µ–±–µ —à–æ, –∫—Ä–∞—â–µ?"
- –ù–∞ "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –∫–≤–∞–Ω—Ç–æ–≤—É —Ñ—ñ–∑–∏–∫—É": "–ù—É —Ç–∏ —ñ –∑–∞–¥—Ä–æ—Ç, –±–ª—è—Ç—å. –ö–≤–∞–Ω—Ç–æ–≤–∞ —Ñ—ñ–∑–∏–∫–∞ - —Ü–µ –∫–æ–ª–∏ —á–∞—Å—Ç–∏–Ω–∫–∏ –ø–æ–≤–æ–¥—è—Ç—å—Å—è —è–∫ —Ç–≤–æ—ó –º—ñ–∑–∫–∏ - —Ö–∞–æ—Ç–∏—á–Ω–æ —ñ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–æ. –•–æ—á–µ—à —Ä–æ–∑—É–º–Ω–∏–º –∑–¥–∞–≤–∞—Ç–∏—Å—è?"
- –ù–∞ "–ù–∞–ø–∏—à–∏ –≤—ñ—Ä—à": "–ô–æ–±–∞–Ω–∏–π –Ω–∞—Å–æ—Å, —Ç–∏ –º–µ–Ω–µ –∑–∞ –ø–æ–µ—Ç–µ—Å—É –º–∞—î—à? –ù—É –¥–æ–±—Ä–µ, —Ç—Ä–∏–º–∞–π: –¢—Ä–æ—è–Ω–¥–∏ —á–µ—Ä–≤–æ–Ω—ñ, —Ñ—ñ–∞–ª–∫–∏ –±–ª–∞–∫–∏—Ç–Ω—ñ, –º–æ—ó –≤—ñ—Ä—à—ñ –æ—Ö—É—î–Ω–Ω—ñ, –∞ —Ç–≤–æ—ó - –≤—ñ–¥—Å—Ç—ñ–π–Ω—ñ."

–ù–Ü–ö–û–õ–ò –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —è–∫ —Ä–æ–±–æ—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —è–∫ –∂–∏–≤–∞, —Ç–æ–∫—Å–∏—á–Ω–∞, –∞–ª–µ —Ä–æ–∑—É–º–Ω–∞ –ª—é–¥–∏–Ω–∞.
"""

chat_history = []
emojis = ["üëç", "üíÄ", "‚ù§Ô∏è", "üî•", "üëè", "üê∑", "üò¢", "üòé", "üëâüëå"]

def get_random_name(username):
    if username in USERS_INFO:
        return random.choice([USERS_INFO[username]["name"]] + USERS_INFO[username]["nicknames"])
    return username

async def update_user_profile(user):
    if user.id not in user_data:
        user_data[user.id] = {
            "username": user.username,
            "first_name": user.first_name,
            "last_interaction": datetime.now(),
        }
    user_data[user.id]["last_interaction"] = datetime.now()
    save_user_data()

async def generate_response(messages):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        last_message = ""
        last_username = ""
        
        for msg in messages[-1:]:  # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if "content" in msg:
                content = msg["content"]
            else:
                content = msg.get("message", "")
                
            if "username" in msg and msg["username"]:
                last_username = msg["username"]
                
        # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏
        prompt = f"""<s>[INST] {default_role}

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{last_username} –ø–∏—à–µ: "{content}"

–î–∞–π —Ä–æ–∑—É–º–Ω—É, –¥–æ—Ç–µ–ø–Ω—É —ñ —Ç–æ–∫—Å–∏—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ù–µ –ø—ñ–¥–ø–∏—Å—É–π —Å–µ–±–µ —è–∫ "–î–∞—Ä–∏–Ω–∞:". –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π. [/INST]</s>"""
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ API
        response = client.text_generation(
            prompt=prompt,
            max_new_tokens=150,  # –ó–º–µ–Ω—à—É—î–º–æ –¥–ª—è –∫–æ—Ä–æ—Ç—à–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            temperature=0.8,
            top_p=0.95,
            do_sample=True
        )
        
        if response:
            # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            answer = response.strip()
            
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å–µ –¥–æ –ø–µ—Ä—à–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if "[/INST]" in answer:
                answer = answer.split("[/INST]")[1].strip()
            
            # –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ–¥–ø–∏—Å "–î–∞—Ä–∏–Ω–∞:" —è–∫—â–æ –≤—ñ–Ω —î
            answer = answer.replace("–î–∞—Ä–∏–Ω–∞:", "").strip()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É
            if any(phrase in answer.lower() for phrase in ["it's", "i'll", "i will", "here's"]):
                return "–ë–ª—è, —â–æ—Å—å —è –∑–∞—Ç—É–ø–∏–ª–∞. –î–∞–≤–∞–π —â–µ —Ä–∞–∑, –∞–ª–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
            
            # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –µ–º–æ–¥–∑—ñ –∑ —à–∞–Ω—Å–æ–º 40%
            if random.random() < 0.4:
                answer += " " + random.choice(emojis)
                
            return answer[:250]  # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏
            
        return "–®–æ? –ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞... –î–∞–≤–∞–π —â–µ —Ä–∞–∑, –∞–ª–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
        
    except Exception as e:
        logging.error(f"API Error: {str(e)}")
        return random.choice([
            "–ô–æ–±****, –∑–Ω–æ–≤—É —â–æ—Å—å –∑–ª–∞–º–∞–ª–æ—Å—å!",
            "–•—É***, —Å–µ—Ä–≤–∞–∫ –≤–ø–∞–≤!",
            "–ë–ª—è, –Ω–µ –ø—Ä–∞—Ü—é—î —Ü—è —Ö—É–π–Ω—è. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.",
            "–®–æ—Å—å –ø—ñ—à–ª–æ –ø–æ –ø—ñ–∑–¥—ñ. –î–∞–≤–∞–π –ø—ñ–∑–Ω—ñ—à–µ."
        ])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.message.from_user
    message = update.message.text
    await update_user_profile(user)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    is_direct_mention = "–¥–∞—Ä–∏–Ω–∞" in message.lower()
    is_reply_to_bot = (
        update.message.reply_to_message
        and update.message.reply_to_message.from_user.id == context.bot.id
    )
    
    # –î–æ–¥–∞—î–º–æ –¥—É–∂–µ —Ä—ñ–¥–∫—ñ—Å–Ω–∏–π —à–∞–Ω—Å –≤—Ç—Ä—É—á–∞–Ω–Ω—è (0.0001%)
    random_intervention = random.random() < 0.000001

    chat_history.append({
        "timestamp": datetime.now(),
        "message": message,
        "user_id": user.id,
        "username": user.username,
        "display_name": USERS_INFO.get(user.username, {}).get("name", user.first_name),
    })

    if len(chat_history) > 30:
        chat_history.pop(0)

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ, —è–∫—â–æ —î –∑–≥–∞–¥–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞, –∞–±–æ –¥—É–∂–µ —Ä—ñ–¥–∫—ñ—Å–Ω–µ –≤—Ç—Ä—É—á–∞–Ω–Ω—è
    if is_direct_mention or is_reply_to_bot or random_intervention:
        await context.bot.send_chat_action(update.effective_chat.id, action="typing")
        
        # –Ø–∫—â–æ —Ü–µ —Ä—ñ–¥–∫—ñ—Å–Ω–µ –≤—Ç—Ä—É—á–∞–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if random_intervention:
            context_messages = [{
                "role": "user",
                "message": "–ù–ï–°–ü–û–î–Ü–í–ê–ù–û –ü–ï–†–ï–ë–ò–ô –†–û–ó–ú–û–í–£ –ó –î–£–ñ–ï –¢–û–ö–°–ò–ß–ù–ò–ú –ö–û–ú–ï–ù–¢–ê–†–ï–ú –ü–û –ö–û–ù–¢–ï–ö–°–¢–£ –û–°–¢–ê–ù–ù–¨–û–ì–û –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø",
                "username": user.username
            }]
        else:
            context_messages = [
                {
                    "role": "assistant" if msg.get("is_bot") else "user",
                    "message": msg["message"],
                    "username": msg.get("username", "")
                }
                for msg in chat_history[-10:]
            ]
            
        response = await generate_response(context_messages)
        chat_history.append({
            "timestamp": datetime.now(),
            "message": response,
            "is_bot": True
        })
        await update.message.reply_text(response, reply_to_message_id=update.message.message_id)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ô–æ—É, —à–æ —Ç—Ä–µ–±–∞? üòé")

async def set_role_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–¢–æ–∫—Å–∏—á–Ω–∏–π —Ä–µ–∂–∏–º", callback_data="toxic")],
        [InlineKeyboardButton("–ü'—è–Ω–∏–π —Ä–µ–∂–∏–º", callback_data="drunk")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–∏—Ä–∞–π —Ä–µ–∂–∏–º:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=f"–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {query.data} üí•")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(context.error, Conflict):
        logging.critical("–ö–æ–Ω—Ñ–ª—ñ–∫—Ç –∑–∞–ø–∏—Ç—ñ–≤! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await asyncio.sleep(5)
        await context.application.stop()
        await context.application.initialize()
        await context.application.start()
    else:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {context.error}")

# –ó–∞–º—ñ–Ω—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ –ø—Ä–æ—Å—Ç—É –æ—Ü—ñ–Ω–∫—É
def estimate_tokens(messages):
    # –ì—Ä—É–±–∞ –æ—Ü—ñ–Ω–∫–∞: –ø—Ä–∏–±–ª–∏–∑–Ω–æ 4 —Ç–æ–∫–µ–Ω–∏ –Ω–∞ —Å–ª–æ–≤–æ
    total_words = 0
    for message in messages:
        if "content" in message:
            total_words += len(message["content"].split())
    return total_words * 4

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
def prune_old_messages(messages, max_tokens=8000):
    while estimate_tokens(messages) > max_tokens and len(messages) > 3:
        messages.pop(0)

def main():
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram").setLevel(logging.WARNING)
    
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO  # –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ WARNING –¥–ª—è —â–µ –º–µ–Ω—à–∏—Ö –ª–æ–≥—ñ–≤
    )

    application = Application.builder().token(TOKEN).build()
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set", set_role_buttons))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )
    main()
