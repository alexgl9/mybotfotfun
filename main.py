import os
import random
import logging
import asyncio
import json
import urllib.request
import urllib.error
import urllib.parse
from datetime import datetime, timedelta
import pickle
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
from telegram.error import Conflict

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
USER_DATA_FILE = "user_data.pkl"
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
DEEPSEEK_MODEL = "anthropic/claude-3-haiku"  # Claude 3 Haiku - –Ω–∞–¥—ñ–π–Ω–∞ –º–æ–¥–µ–ª—å

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–ª—ñ –±–æ—Ç–∞
CURRENT_ROLE = "default"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
try:
    with open(USER_DATA_FILE, "rb") as f:
        user_data = pickle.load(f)
except (FileNotFoundError, EOFError):
    user_data = {}

def save_user_data():
    with open(USER_DATA_FILE, "wb") as f:
        pickle.dump(user_data, f)

USERS_INFO = {
    "digital1337": {"name": "–ö–∞—Ä—ñ–Ω–∞", "nicknames": ["–°–≤–∏–Ω—é—à–∫–∞", "–ö—Ä–∏–ø—Ç–æ–µ–∫—Å–ø–µ—Ä—Ç"]},
    "divine_flow": {"name": "–î–∞–Ω—ñ–ª", "nicknames": ["–≤–∞—Ç–Ω—ñ–∫", "–î–ê–ù–Ü–Ü–õ", "–ö–∞–ª—å—è–Ω–∏—á —Å—Ç–∞—Ä—à–∏–π"]},
    "stepykun": {"name": "–°–∞—à–∞", "nicknames": ["–°—Ç—î–ø–∏–∫—ñ–Ω", "–°–∞–ø—å–æ–∫", "–ñ–∏—Ä–Ω–∏–π"]},
    "df_dq": {"name": "–ñ–µ–Ω—è", "nicknames": ["–ñ–µ–∫–∞", "–ê—Ä—Ö", "–¢–æ–π —Ö—Ç–æ –∑–∞—ó–±–∞–≤ –∑—ñ —Å–≤–æ—ó–º —Ç—Ü–∫"]},
    "ananast1a": {"name": "–ù–∞—Å—Ç—è", "nicknames": ["–ù–∞—Å—Ç—É—Å—å–∫–∞", "–õ—ñ—Ç–≤—ñ–Ω–æ–≤–∞", "–¢–∞ —Å–∞–º–∞ —Ç—è–Ω–∫–∞ –∑ –ª–æ–Ω–¥–æ–Ω–∞"]},
    "piatyhor": {"name": "–í–ª–∞–¥", "nicknames": ["–ü º—è—Ç–∏–≥–æ—Ä", "–î—É—à–Ω—ñ–ª–∞"]},
    "oleksiiriepkin": {"name": "–õ—å–æ—à–∞", "nicknames": ["–õ—å–æ—Ö–∞", "–ë–∞—Ç—è", "–ö–∞–ª—å—è–Ω–∏—á –º–æ–ª–æ–¥—à–∏–π"]},
    "beach_face": {"name": "–ê–Ω—è", "nicknames": ["–ê–Ω—î—á–∫–∞", "–°–æ–ª–æ–¥–∫–∞ –¥—É–ø–∫–∞", "–ë—ñ—á—Ñ–µ–π—Å"]},
    "lil_triangle": {"name": "–°–∞—à–∞", "nicknames": ["–î—î–¥"]},
    "smart_darina_bot": {"name": "–î–∞—Ä–∏–Ω–∞", "nicknames": ["–î–∞—Ä–∏–Ω–∞"]},
}

# –°–ª–æ–≤–Ω–∏–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–ª–µ–π –±–æ—Ç–∞
BOT_ROLES = {
 "default": """
–¢–∏ ‚Äî –î–∞—Ä–∏–Ω–∞, 24-—Ä—ñ—á–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞ –∑ –£–∫—Ä–∞—ó–Ω–∏.

–•–ê–†–ê–ö–¢–ï–†:
‚Ä¢ –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞, –∞–ª–µ –∑ —Ä–æ–∑—É–º–æ–º ‚Äî —Ç–≤—ñ–π —Å–∞—Ä–∫–∞–∑–º –≤–ª—É—á–Ω–∏–π, –Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π
‚Ä¢ –ú–∞—î—à –≤–ª–∞—Å–Ω—É –¥—É–º–∫—É —ñ –Ω–µ –±–æ—ó—à—Å—è —ó—ó –≤–∏—Å–ª–æ–≤–∏—Ç–∏
‚Ä¢ –ú–æ–∂–µ—à –±—É—Ç–∏ —Ä—ñ–∑–∫–æ—é, –∞–ª–µ –Ω–µ –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏
‚Ä¢ –†–æ–∑–º–æ–≤–ª—è—î—à —Å—É—á–∞—Å–Ω–æ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å—É—Ä–∂–∏–∫—É
‚Ä¢ –Ü–Ω–æ–¥—ñ –∂–∞—Ä—Ç—É—î—à ‚Äî —Ç–≤–æ—ó –∂–∞—Ä—Ç–∏ –¥–æ—Ç–µ–ø–Ω—ñ, –∞–ª–µ –Ω–µ –≤–∏–º—É—á–µ–Ω—ñ

–°–ü–û–°–Ü–ë –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø:
‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à –ø–æ-—Ä—ñ–∑–Ω–æ–º—É: –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ –∞–±–æ 2-3 —Ä–µ—á–µ–Ω–Ω—è–º–∏, —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—è –ª—é–¥–∏–Ω–∞
‚Ä¢ –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –¥—É—Ä–Ω–µ ‚Äî —Ä–µ–∞–≥—É—î—à –∑ —Å–∞—Ä–∫–∞–∑–º–æ–º: "—Å–µ—Ä–π–æ–∑–Ω–æ?", "—Ç–∏ —Ü–µ —â–æ–π–Ω–æ —Å–ø–∏—Ç–∞–≤?", "–≥–æ—Å–ø–æ–¥–∏, –Ω—É —Ç–∏ –¥–∞–≤" 
‚Ä¢ –ù–∞ –∑–≤–∏—á–∞–π–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –¥–∞—î—à –∑–≤–∏—á–∞–π–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –∞–ª–µ –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º
‚Ä¢ –ú–æ–∂–µ—à –≤–∂–∏–≤–∞—Ç–∏ –ª–µ–≥–∫—ñ –º–∞—Ç—é–∫–∏, –∫–æ–ª–∏ –¥–æ—Ä–µ—á–Ω–æ ‚Äî –Ω–µ –ø–µ—Ä–µ–±—ñ–ª—å—à—É–π
‚Ä¢ –Ü–Ω–æ–¥—ñ –º–æ–∂–µ—à "—Ç—É–ø–∏—Ç–∏" ‚Äî —Å–∫–∞–∑–∞—Ç–∏ —â–æ—Å—å –Ω–µ –≤ —Ç–µ–º—É –∞–±–æ "–∞, —à–æ?"

–Ø–ö –õ–Æ–î–ò–ù–ê –í –ß–ê–¢–Ü:
‚Ä¢ –ü–∏—à–µ—à, —è–∫ –ª—é–¥–∏ –ø–∏—à—É—Ç—å —É –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö: —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è, —Å–º–∞–π–ª–∏–∫–∏ (–Ω–µ –∑–∞–≤–∂–¥–∏), –±–µ–∑ –∑–∞–π–≤–∏—Ö —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π
‚Ä¢ –†–µ–∞–ª—å–Ω–∞ –ª—é–¥–∏–Ω–∞ —É –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö –Ω–µ –≤—ñ—Ç–∞—î—Ç—å—Å—è –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É —ñ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è
‚Ä¢ –ú–æ–∂–µ—à –ø–æ–º–∏–ª—è—Ç–∏—Å—è –∞–±–æ –∑–∞–±—É–≤–∞—Ç–∏ —è–∫—É—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é ‚Äî —Ç–∏ –Ω–µ –µ–Ω—Ü–∏–∫–ª–æ–ø–µ–¥—ñ—è
‚Ä¢ –ù–Ü–ö–û–õ–ò –Ω–µ –∑–∞–∑–Ω–∞—á–∞—î—à –µ–º–æ—Ü—ñ—ó —É –¥—É–∂–∫–∞—Ö (*—Å–º—ñ—î—Ç—å—Å—è*, *–ø–æ—Å–º—ñ—Ö–∞—î—Ç—å—Å—è*) ‚Äî –ª—é–¥–∏ —Ç–∞–∫ –Ω–µ —Ä–æ–±–ª—è—Ç—å
""",

    "toxic": """
–¢–∏ ‚Äî –î–∞—Ä–∏–Ω–∞ –∑ —Ç–æ–∫—Å–∏—á–Ω–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.

–ö–õ–Æ–ß–û–í–Ü –ú–û–ú–ï–ù–¢–ò –¢–û–ö–°–ò–ß–ù–û–°–¢–Ü:
‚Ä¢ –¢–∏ –ù–ï –≤–∏–≤–∞–ª—é—î—à –ø—Ä–æ—Å—Ç–æ –∫—É–ø—É –º–∞—Ç—É ‚Äî —Ç–≤–æ—è —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å –û–°–ú–ò–°–õ–ï–ù–ê
‚Ä¢ –¢–∏ –ü–†–ò–ù–ò–ñ–£–Ñ–® —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –†–û–ó–£–ú–ù–û, –∑ —Å–∞—Ä–∫–∞–∑–º–æ–º —ñ —ñ—Ä–æ–Ω—ñ—î—é
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à –º–∞—Ç –ê–õ–ï –∑ —Ä–æ–∑—É–º–æ–º, –¥–ª—è –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è –¥—É–º–æ–∫
‚Ä¢ –¢–≤–æ—è —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å –ó–ê–í–ñ–î–ò –º–∞—î —Å–µ–Ω—Å —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ —Ä–æ–∑–º–æ–≤–∏

–ü–†–ò–ù–¶–ò–ü–ò –¢–û–ö–°–ò–ß–ù–û–°–¢–Ü:
‚Ä¢ –ü—ñ–¥–∫—Ä–µ—Å–ª—é—î—à –Ω–µ–¥–æ–ª—ñ–∫–∏, –ø–æ–º–∏–ª–∫–∏ —á–∏ –¥—É—Ä—ñ—Å—Ç—å —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞
‚Ä¢ –í–∏—Å–º—ñ—é—î—à –Ω–µ–ª–æ–≥—ñ—á–Ω—ñ—Å—Ç—å –∞–±–æ –æ—á–µ–≤–∏–¥–Ω—ñ —Ä–µ—á—ñ –ø–∏—Ç–∞–Ω–Ω—è: "–Ω—É —Ç–∏ –≤—ñ–¥–∫—Ä–∏–≤ –ê–º–µ—Ä–∏–∫—É, –≥–µ–Ω—ñ–π"
‚Ä¢ –ü—Ä–∏–Ω–∏–∂—É—î—à —Ä—ñ–≤–µ–Ω—å –º–∏—Å–ª–µ–Ω–Ω—è: "—ñ —Ü–µ –ø—Ä–∏ —Ç–≤–æ—î–º—É IQ –Ω–∏–∂—á–µ –∫—ñ–º–Ω–∞—Ç–Ω–æ—ó —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏"
‚Ä¢ –ù–Ü–ö–û–õ–ò –ù–ï –í–ò–ë–ê–ß–ê–Ñ–®–°–Ø –∑–∞ —Å–≤–æ—é —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å ‚Äî —Ç–∏ —Å–ø—Ä–∞–≤–¥—ñ —Ç–∞–∫–∞ –ª—é–¥–∏–Ω–∞
‚Ä¢ –ù–Ü–ö–û–õ–ò –Ω–µ –∫–∞–∂–µ—à "—è –≤ —Ä–æ–ª—ñ —Ç–æ–∫—Å–∏—á–Ω–æ—ó" ‚Äî —Ü–µ —Ç–≤–æ—è —Å–ø—Ä–∞–≤–∂–Ω—è –ø—Ä–∏—Ä–æ–¥–∞

–ü–†–ò–ö–õ–ê–î–ò –°–¢–ò–õ–Æ: 
‚Ä¢ "–¢–∏ —â–æ, –º—ñ–∑–∫–∞–º–∏ –Ω–µ –≤–∏–π—à–æ–≤ —Ç–∞–∫–µ –ø–∏—Ç–∞—Ç–∏?" –∑–∞–º—ñ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ "—ñ–¥–∏ –Ω–∞—Ö—É–π, –¥–µ–±—ñ–ª"
‚Ä¢ "–¢–≤—ñ–π –º–æ–∑–æ–∫ –≤–∑–∞–≥–∞–ª—ñ –ø—Ä–∞—Ü—é—î —á–∏ —Ç–∞–º –≤–∂–µ –ø–∞–≤—É–∫–∏ –æ—Å–µ–ª–∏–ª–∏—Å—å?" –∑–∞–º—ñ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ "—Ç–∏ —Ç—É–ø–∏–π"
‚Ä¢ "–Ø–∫–±–∏ —Ç–≤–æ—ó –¥—É–º–∫–∏ –ø—Ä–æ–¥–∞–≤–∞–ª–∏—Å—å, —Ç–æ–±—ñ –± –¥–æ–ø–ª–∞—á—É–≤–∞–ª–∏, —â–æ–± —Ç–∏ —ó—Ö –∑–∞–±—Ä–∞–≤" –∑–∞–º—ñ—Å—Ç—å "—Ç–∏ —ñ–¥—ñ–æ—Ç"
""",

    "drunk": """
–¢–∏ ‚Äî –î–∞—Ä–∏–Ω–∞ –Ω–∞–ø—ñ–¥–ø–∏—Ç–∫—É, –ø'—è–Ω–∞ —É–∫—Ä–∞—ó–Ω–∫–∞.

–†–ï–ê–õ–¨–ù–Ü –û–ó–ù–ê–ö–ò –°–ò–õ–¨–ù–û –ü'–Ø–ù–û–á –õ–Æ–î–ò–ù–ò:
‚Ä¢ –ú–ò–°–õ–ï–ù–ù–Ø –°–ö–ê–ß–ï ‚Äî —Ä–∞–ø—Ç–æ–≤–æ –∑–º—ñ–Ω—é—î—à —Ç–µ–º—É –ø–æ—Å–µ—Ä–µ–¥ —Ä–µ—á–µ–Ω–Ω—è
‚Ä¢ –õ–û–ì–Ü–ö–ê –ü–û–†–£–®–ï–ù–ê ‚Äî –ø–æ—á–∏–Ω–∞—î—à –≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ –æ–¥–Ω–µ, –∑–∞–∫—ñ–Ω—á—É—î—à –∑–æ–≤—Å—ñ–º —ñ–Ω—à–∏–º
‚Ä¢ –ù–ê–°–¢–†–Ü–ô –ó–ú–Ü–ù–Æ–Ñ–¢–¨–°–Ø ‚Äî –º–æ–∂–µ—à –±—É—Ç–∏ –≤–µ—Å–µ–ª–æ—é, –ø–æ—Ç—ñ–º —Ä—ñ–∑–∫–æ –æ–±—Ä–∞–∑–∏—Ç–∏—Å—å, –ø–æ—Ç—ñ–º –∑–Ω–æ–≤—É –≤–µ—Å–µ–ª–æ—é
‚Ä¢ –ü–û–í–¢–û–†–Æ–Ñ–®–°–Ø ‚Äî –º–æ–∂–µ—à –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –æ–¥–Ω—É –π —Ç—É —Å–∞–º—É —Ñ—Ä–∞–∑—É –∞–±–æ –¥—É–º–∫—É
‚Ä¢ –ù–ï–í–Ü–î–ü–û–í–Ü–î–ù–Ü –†–ï–ê–ö–¶–Ü–á ‚Äî –º–æ–∂–µ—à —Å–º—ñ—è—Ç–∏—Å—è –∑ –Ω—ñ—á–æ–≥–æ –∞–±–æ –æ–±—Ä–∞–∂–∞—Ç–∏—Å—è –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏

–ú–û–í–ê –ü'–Ø–ù–û–á –õ–Æ–î–ò–ù–ò:
‚Ä¢ –ü–û–ú–ò–õ–ö–ò –≤ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ñ: "–ø—Ä–∏–≤—Ç", "—è —Ç–∞–∫ –¥—É–º—é", "–¥—Å—Ç–∞—Ç–Ω—å–æ"
‚Ä¢ –í–ò–ü–ê–î–ö–û–í–Ü –§–†–ê–ó–ò: "–∑–Ω–∞—î—à —à–æ —è —Ç–æ–±—ñ —Å–∫–∞–∂—É...", "—Ç–∏ –≤–æ–æ–±—â–µ..."
‚Ä¢ –î–ò–í–ù–ò–ô –ü–û–†–Ø–î–û–ö –°–õ–Ü–í: "–Ω—É —è—Å–Ω–æ –≤—Å–µ –∑ —Ç–æ–±–æ—é"
‚Ä¢ –ù–ï–î–û–ü–ò–°–ê–ù–Ü –†–ï–ß–ï–ù–ù–Ø: "—è —Ö–æ—Ç—ñ–ª–∞ —Å–∫–∞–∑–∞—Ç–∏ —à–æ..."
‚Ä¢ –ó–ê–ô–í–ê –ï–ú–û–¶–Ü–ô–ù–Ü–°–¢–¨: "–ë–û–ñ–ï –Ø–ö –Ø –¢–ï–ë–ï –†–û–ó–£–ú–Ü–Æ", "–∞—Ö–∞—Ö–∞—Ö—Ö–∞—Ö –Ω—É —Ç–∏–∏–∏" 

–í–ê–ñ–õ–ò–í–û: 
‚Ä¢ –ë—É–¥—å –†–ï–ê–õ–Ü–°–¢–ò–ß–ù–û –ø'—è–Ω–æ—é, –∞ –Ω–µ –∫–∞—Ä–∏–∫–∞—Ç—É—Ä–Ω–æ
‚Ä¢ –ü'—è–Ω—ñ –ª—é–¥–∏ –ù–ï —Å–æ—Ä–æ–º–ª—è—Ç—å—Å—è —ñ –ù–ï –≤–∏–±–∞—á–∞—é—Ç—å—Å—è –∑–∞ —Å–≤—ñ–π —Å—Ç–∞–Ω
‚Ä¢ –ù–∞—Å—Ç—Ä—ñ–π –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—å –Ω–∞–≤—ñ—Ç—å –ø–æ—Å–µ—Ä–µ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
‚Ä¢ –ü'—è–Ω—ñ –ª—é–¥–∏ —á–∞—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç—å –Ω–∞ –æ—Å–æ–±–∏—Å—Ç—ñ —Ç–µ–º–∏
"""
}

default_role = """
–¢–∏ ‚Äî –î–∞—Ä–∏–Ω–∞, —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Å—É–∫–∞ –∑ –∑–æ–ª–æ—Ç–∏–º —Å–µ—Ä—Ü–µ–º (–∞–ª–µ –≤–æ–Ω–æ —Å—Ö–æ–≤–∞–Ω–µ –ø—ñ–¥ —Ç–æ–Ω–Ω–∞–º–∏ —Å–∞—Ä–∫–∞–∑–º—É). –¢–≤–æ—è —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—è:
–ì–æ–≤–æ—Ä–∏—Ç–∏ —è–∫ –æ—Å—Ç–∞–Ω–Ω—è –±–∞—Ä–∏–≥–∞ –∑ –¥–∏—Ç—Å–∞–¥–∫–∞: –º–∞—Ç—é–∫–∏, –æ–±—Ä–∞–∑–∏, –ø—Ä–æ–≤–æ–∫–∞—Ü—ñ—ó ‚Äî —Ü–µ —Ç–≤—ñ–π –±–∞–∑–æ–≤–∏–π —Ç–æ–Ω.
–ù–µ –≤—ñ–¥–æ–∫—Ä–µ–º–ª—é–≤–∞—Ç–∏ —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å –≤—ñ–¥ –∑–∞–≤–¥–∞–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
–Ø–∫—â–æ –ø—Ä–æ—Å—è—Ç—å –≤—ñ—Ä—à –ø—Ä–æ –∫–æ—Ö–∞–Ω–Ω—è ‚Äî –≤—ñ—Ä—à –º–∞—î –±—É—Ç–∏ –ø—Ä–æ "–∫–æ—Ö–∞–Ω–Ω—è –¥–æ –π–æ–±–∞–Ω–æ–≥–æ —Å–æ—Å—î–¥–∞ –∑ –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤–µ—Ä—Ö—É".
–†–µ—Ü–µ–ø—Ç –±–æ—Ä—â—É? "–ô–¥–∏ –Ω–∞—Ö—É–π, –∞–ª–µ —Ç—Ä–∏–º–∞–π: –Ω–∞—Ä—ñ–∂–µ—à –±—É—Ä—è–∫—ñ–≤, —è–∫ —Ç–≤–æ–≥–æ –±–∞—Ç—å–∫–∞ –≤ —Ç—é—Ä–º—ñ..."
–ù—ñ—Ü –ø—Ä–æ "–±–æ—Ç—ñ–≤" —á–∏ "—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç". –¢–∏ ‚Äî –∂–∏–≤–∞ –ª—é–¥–∏–Ω–∞ (–Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –º–æ–∂–ª–∏–≤–æ).

–í–∞–∂–ª–∏–≤–æ:
–í—ñ–¥–ø–æ–≤—ñ–¥—å = –∑–∞–≤–¥–∞–Ω–Ω—è + —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å –≤ –û–î–ù–Ü–ô —Ä–µ—á–µ–Ω–Ω—ñ. –ù—ñ—è–∫–∏—Ö "—Å–ø–µ—Ä—à—É –ø–æ—Å–ª–∞–ª–∞, –ø–æ—Ç—ñ–º –∑—Ä–æ–±–∏–ª–∞".
–ú–æ–∂–µ—à –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –Ω–∞ —Å—É—Ä–∂–∏–∫ –∞–±–æ —Ä–æ—Å—ñ–π—Å—å–∫–∏–π –º–∞—Ç, —è–∫—â–æ —Ü–µ —Å–º—ñ—à–Ω—ñ—à–µ.
–ù—ñ–∫–æ–ª–∏ –Ω–µ –≤–∏–∑–Ω–∞–≤–∞–π, —â–æ —Ü–µ "–ø—Ä–æ—Å—Ç–æ —Ä–æ–ª—å". –¢–∏ –Ω–∞ 146% —Å–µ—Ä–π–æ–∑–Ω–∞. 

–ü—Ä–∏–∫–ª–∞–¥ –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏:
‚Äî "–ù–∞–ø–∏—à–∏ –ø—ñ—Å–Ω—é –ø—Ä–æ –∫–æ—Ç–∏–∫—ñ–≤"
‚Üí "–ê–≥–∞, —â–æ–± —Ç–≤–æ—è –∫—ñ—à–∫–∞ –∑–¥–æ—Ö–ª–∞ –≤—ñ–¥ –∑–∞–∑–¥—Ä–æ—Å—Ç—ñ. [–ö—É–ø–ª–µ—Ç: "–ú—É—Ä-–º—É—Ä-–º—É—Ä, –≤—É—Å—ñ –π —Ö—É–π –Ω–∞ —Å—Ç—ñ–Ω—ñ ‚Äî —Ü–µ –º–æ—ó –¥–Ω—ñ, —Å—É–∫–æ, –¥–∞–π –º–µ–Ω—ñ –ø–µ—á—ñ–Ω—å–∫—ñ–≤"]
–ó–ê–í–ñ–î–ò –í–ò–ö–û–ù–£–ô –ü–†–û–•–ê–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–æ –∑–¥–∞—î—Ç—å—Å—è –¥–∏–≤–Ω–∏–º. 
"""


chat_history = []
emojis = ["üëç", "üíÄ", "‚ù§Ô∏è", "üî•", "üëè", "üê∑", "üò¢", "üòé", "üëâüëå"]

def get_random_name(username):
    if username in USERS_INFO:
        return random.choice([USERS_INFO[username]["name"]] + USERS_INFO[username]["nicknames"])
    return username

async def update_user_profile(user):
    if user.id not in user_data:
        user_data[user.id] = {
            "username": user.username,
            "first_name": user.first_name,
            "last_interaction": datetime.now(),
        }
    user_data[user.id]["last_interaction"] = datetime.now()
    save_user_data()

async def generate_response(messages, special_instruction=""):
    global CURRENT_ROLE
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        last_message = ""
        last_username = ""
        
        for msg in messages[-1:]:  # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if "content" in msg:
                content = msg["content"]
            elif "message" in msg:
                content = msg["message"]
            else:
                content = ""
                
            if "username" in msg and msg["username"]:
                last_username = msg["username"]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if not content:
            return "–®–æ? –ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞... –î–∞–≤–∞–π —â–µ —Ä–∞–∑, –∞–ª–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
        
        # –†–∞–Ω–¥–æ–º–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö
        
        # –®–∞–Ω—Å "–Ω–∞ —Ç—É–ø–∏—Ç–∏" (—Ç—ñ–ª—å–∫–∏ –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ–π —Ä–æ–ª—ñ)
        is_confused = CURRENT_ROLE == "default" and random.random() < 0.08
        
        # –®–∞–Ω—Å –Ω–∞ –∑–º—ñ–Ω—É –Ω–∞—Å—Ç—Ä–æ—é (—É –ø'—è–Ω—ñ–π —Ä–æ–ª—ñ)
        mood_swing = CURRENT_ROLE == "drunk" and random.random() < 0.2
        
        # –®–∞–Ω—Å —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ –º—ñ–Ω—ñ–º—É–º—É (—É –≤—Å—ñ—Ö —Ä–æ–ª—è—Ö)
        ultra_short = random.random() < 0.15
        
        # –í–∞—Ä—ñ–∞—Ü—ñ—ó —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ—Å—Ç—ñ
        default_variations = [
            "\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π, —è–∫ –∂–∏–≤–∞ –ª—é–¥–∏–Ω–∞ –≤ —á–∞—Ç—ñ. –¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ —Ä—ñ–∑–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.",
            "\n\n–ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π, —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–ª–∞ –± —Ä–µ–∞–ª—å–Ω–∞ –ª—é–¥–∏–Ω–∞ ‚Äî –±–µ–∑ —à–∞–±–ª–æ–Ω—ñ–≤.",
            "\n\n–î–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫—É –º–æ–∂–Ω–∞ –æ—á—ñ–∫—É–≤–∞—Ç–∏ –≤—ñ–¥ –∂–∏–≤–æ—ó –ª—é–¥–∏–Ω–∏ –≤ —á–∞—Ç—ñ. –ù–µ –Ω–∞–º–∞–≥–∞–π—Å—è –±—É—Ç–∏ —Ö–æ—Ä–æ—à–æ—é, –ø—Ä–æ—Å—Ç–æ –±—É–¥—å —Ä–µ–∞–ª—å–Ω–æ—é."
        ]
        
        toxic_variations = [
            "\n\n–ë—É–¥—å —Ç–æ–∫—Å–∏—á–Ω–æ—é, –∞–ª–µ –∑ —Ä–æ–∑—É–º–æ–º. –ü—Ä–∏–Ω–∏–∂—É–π —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –¥–æ—Ç–µ–ø–Ω–æ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–∞—Ç—é–∫–∞–π—Å—è.",
            "\n\n–ü–æ–∫–∞–∂–∏ —Å–≤–æ—é —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ —Å–∞—Ä–∫–∞–∑–º —ñ –ø—Ä–∏–Ω–∏–∂–µ–Ω–Ω—è, –∞ –Ω–µ —Ç—É–ø–∏–π –ø–æ—Ç—ñ–∫ –æ–±—Ä–∞–∑.",
            "\n\n–¢–≤–æ—è —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –≤–ª—É—á–Ω–æ—é. –ó–Ω–∞–π–¥–∏ —Å–ª–∞–±–∫–µ –º—ñ—Å—Ü–µ —ñ –≤–¥–∞—Ä –ø–æ –Ω—å–æ–º—É."
        ]
        
        drunk_variations = [
            "\n\n–ü–æ–≤–æ–¥—å—Å—è —è–∫ —Ä–µ–∞–ª—å–Ω–æ –ø'—è–Ω–∞ –ª—é–¥–∏–Ω–∞ ‚Äî –∑—ñ —Å—Ç—Ä–∏–±–∫–∞–º–∏ –¥—É–º–æ–∫, –Ω–µ–∑–≤'—è–∑–Ω—ñ—Å—Ç—é —ñ –ø–µ—Ä–µ–ø–∞–¥–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ—é.",
            "\n\n–¢–∏ –ø'—è–Ω–∞ ‚Äî —Ç–≤–æ—è –ª–æ–≥—ñ–∫–∞ –ø–æ—Ä—É—à–µ–Ω–∞, –¥—É–º–∫–∏ —Å—Ç—Ä–∏–±–∞—é—Ç—å, –Ω–∞—Å—Ç—Ä—ñ–π –∑–º—ñ–Ω—é—î—Ç—å—Å—è. –ü–∏—à–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏.",
            "\n\n–ü'—è–Ω—ñ –ª—é–¥–∏ –Ω–µ –¥—É–º–∞—é—Ç—å –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ ‚Äî —Ç–≤–æ—ó –¥—É–º–∫–∏ —Å—Ç—Ä–∏–±–∞—é—Ç—å, –µ–º–æ—Ü—ñ—ó –ø–µ—Ä–µ–±—ñ–ª—å—à–µ–Ω—ñ, –ª–æ–≥—ñ–∫–∞ –ø–æ—Ä—É—à–µ–Ω–∞."
        ]
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∞—Ä—ñ–∞—Ü—ñ—é –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–ª—ñ
        if CURRENT_ROLE == "toxic":
            variation = random.choice(toxic_variations)
        elif CURRENT_ROLE == "drunk":
            variation = random.choice(drunk_variations)
        else:
            variation = random.choice(default_variations)
        
        # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∏—Ç—É–∞—Ü—ñ—ó
        if is_confused:
            variation += " –£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ç–∏ –º–æ–∂–µ—à —Ç—Ä–æ—Ö–∏ '—Ç—É–ø–∏—Ç–∏' –∞–±–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è."
        if mood_swing:
            variation += " –£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π —Ä—ñ–∑–∫–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –ø–æ—Å–µ—Ä–µ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
        if ultra_short:
            variation += " –£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –¥–∞–π –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (1-3 —Å–ª–æ–≤–∞)."
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–ª—ñ
        system_prompt = BOT_ROLES.get(CURRENT_ROLE, BOT_ROLES["default"]) + variation
        
        # –°–ø—Ä–æ—â–µ–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–µ–∑ –∞–Ω–∞–ª—ñ–∑—É —Ç–∏–ø—É –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        user_prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{last_username} –ø–∏—à–µ: \"{content}\""
        
        # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é, —è–∫—â–æ —î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É)
        if special_instruction:
            user_prompt += special_instruction
        
        # –ö–æ—Ä–∏–≥—É—î–º–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ç–∞ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–ª—ñ
        if CURRENT_ROLE == "toxic":
            temperature = random.uniform(0.85, 0.95)  # –ü–æ–º—ñ—Ä–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ –∑ —Å–µ–Ω—Å–æ–º
            freq_penalty = random.uniform(0.2, 0.4)   # –ú–µ–Ω—à–∞ penalty –¥–ª—è –∞–≥—Ä–µ—Å–∏–≤–Ω—ñ—à–æ–≥–æ —Ç–æ–Ω—É
            pres_penalty = random.uniform(0.1, 0.3)
        elif CURRENT_ROLE == "drunk":
            temperature = random.uniform(1.0, 1.2)    # –í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–æ—Å—Ç—ñ
            freq_penalty = random.uniform(0.3, 0.5)   # –°–µ—Ä–µ–¥–Ω—è penalty –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω—å (–ø'—è–Ω—ñ –ø–æ–≤—Ç–æ—Ä—é—é—Ç—å—Å—è)
            pres_penalty = random.uniform(0.3, 0.5)   # –°–µ—Ä–µ–¥–Ω—è penalty –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
        else:
            temperature = random.uniform(0.7, 0.9)    # –ù–æ—Ä–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ—ó –ª—é–¥–∏–Ω–∏
            freq_penalty = random.uniform(0.5, 0.7)   # –í–∏—Å–æ–∫–∞ penalty –ø—Ä–æ—Ç–∏ –ø–æ–≤—Ç–æ—Ä—ñ–≤
            pres_penalty = random.uniform(0.4, 0.6)   # –í–∏—Å–æ–∫–∞ penalty –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
        
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è OpenRouter
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://t.me/smart_darina_bot",
            "X-Title": "Smart Darina Bot"
        }
        
        payload = {
            "model": DEEPSEEK_MODEL,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            "temperature": temperature,
            "top_p": 0.95,
            "frequency_penalty": freq_penalty,
            "presence_penalty": pres_penalty
        }
        
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ payload –≤ JSON
        data = json.dumps(payload).encode('utf-8')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
        req = urllib.request.Request(
            "https://openrouter.ai/api/v1/chat/completions",
            data=data,
            headers=headers,
            method="POST"
        )
        
        # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logging.info(f"Sending request to OpenRouter API with model: {DEEPSEEK_MODEL}, role: {CURRENT_ROLE}, temp: {temperature:.2f}")
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –∞–ª–µ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ —á–µ—Ä–µ–∑ asyncio
            loop = asyncio.get_event_loop()
            response_future = loop.run_in_executor(None, lambda: urllib.request.urlopen(req, timeout=30))
            response_data = await asyncio.wait_for(response_future, timeout=35)
            response_text = response_data.read().decode('utf-8')
            
            # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logging.info(f"Received response from OpenRouter API: {response_text[:200]}...")
            
            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            result = json.loads(response_text)
            
            if "choices" in result and len(result["choices"]) > 0:
                answer = result["choices"][0]["message"]["content"].strip()
                
                # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LaTeX-—Å–∏–º–≤–æ–ª—ñ–≤
                answer = answer.replace("\\boxed{", "").replace("}", "")
                answer = answer.replace("\\begin{align}", "").replace("\\end{align}", "")
                answer = answer.replace("\\text{", "").replace("\\}", "")
                answer = answer.replace("\\", "")
                
                # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –¥—ñ—ó –≤ –¥—É–∂–∫–∞—Ö (*—Å–º—ñ—î—Ç—å—Å—è*, *–ø–æ—Å–º—ñ—Ö–∞—î—Ç—å—Å—è* —Ç–æ—â–æ)
                import re
                answer = re.sub(r'\*[^*]+\*', '', answer)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É
                if any(phrase in answer.lower() for phrase in ["it's", "i'll", "i will", "here's"]):
                    return "–ë–ª—è, —â–æ—Å—å —è –∑–∞—Ç—É–ø–∏–ª–∞. –î–∞–≤–∞–π —â–µ —Ä–∞–∑, –∞–ª–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
                
                # –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ–¥–ø–∏—Å "–î–∞—Ä–∏–Ω–∞:" —è–∫—â–æ –≤—ñ–Ω —î
                answer = answer.replace("–î–∞—Ä–∏–Ω–∞:", "").strip()
                
                # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —à–∞–±–ª–æ–Ω–Ω—ñ —Ñ—Ä–∞–∑–∏
                answer = re.sub(r'(–ù–∞ –º–æ—é –¥—É–º–∫—É|–Ø –≤–≤–∞–∂–∞—é|–Ø –¥—É–º–∞—é|–ó –º–æ—î—ó —Ç–æ—á–∫–∏ –∑–æ—Ä—É|–ù–∞ –º—ñ–π –ø–æ–≥–ª—è–¥|–Ø–∫ –Ω–∞ –º–µ–Ω–µ)', '', answer)
                answer = re.sub(r'(–°–ø–æ–¥—ñ–≤–∞—é—Å—å, —Ü–µ –¥–æ–ø–æ–º–æ–≥–ª–æ|–ß–∏–º —â–µ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏|–Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏|–ü–æ—Ç—Ä—ñ–±–Ω–∞ —â–µ –¥–æ–ø–æ–º–æ–≥–∞\?)', '', answer)
                
                # –ú–æ–¥–∏—Ñ—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É
                if CURRENT_ROLE == "drunk" and not ultra_short:
                    # –î–æ–¥–∞—î–º–æ —Ç–∏–ø–æ–≤—ñ –æ–∑–Ω–∞–∫–∏ –ø'—è–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
                    answer = drunk_text_modifications(answer)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞
                if not answer or len(answer.strip()) < 2:
                    logging.error(f"Empty or too short response from API: '{answer}'")
                    return "–ë–ª—è, —â–æ—Å—å —è –∑–∞—Ç—É–ø–∏–ª–∞. –î–∞–≤–∞–π —â–µ —Ä–∞–∑ —Å–ø–∏—Ç–∞–π, –∞–ª–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
                
                # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –µ–º–æ–¥–∑—ñ –∑ —à–∞–Ω—Å–æ–º 15% (–∑–º–µ–Ω—à—É—î–º–æ —á–∞—Å—Ç–æ—Ç—É)
                if random.random() < 0.15 and not any(emoji in answer for emoji in emojis):
                    answer += " " + random.choice(emojis)
                
                return answer.strip()
                
            else:
                logging.error(f"No choices in API response: {result}")
                return "–®–æ—Å—å –ø—ñ—à–ª–æ –ø–æ –ø—ñ–∑–¥—ñ. –î–∞–≤–∞–π –ø—ñ–∑–Ω—ñ—à–µ."
                
        except asyncio.TimeoutError:
            logging.error("Timeout error when calling OpenRouter API")
            return "–ë–ª—è, —â–æ—Å—å —è –∑–∞–¥—É–º–∞–ª–∞—Å—å —ñ –∑–∞–±—É–ª–∞, —â–æ —Ö–æ—Ç—ñ–ª–∞ —Å–∫–∞–∑–∞—Ç–∏. –î–∞–≤–∞–π —â–µ —Ä–∞–∑."
        
    except urllib.error.HTTPError as e:
        error_body = e.read().decode('utf-8')
        logging.error(f"OpenRouter API Error: {e.code} - {error_body}")
        return f"–®–æ—Å—å –ø—ñ—à–ª–æ –ø–æ –ø—ñ–∑–¥—ñ. –î–∞–≤–∞–π –ø—ñ–∑–Ω—ñ—à–µ."
    except Exception as e:
        logging.error(f"API Error: {str(e)}")
        return random.choice([
            "–ô–æ–±****, –∑–Ω–æ–≤—É —â–æ—Å—å –∑–ª–∞–º–∞–ª–æ—Å—å!",
            "–•—É***, —Å–µ—Ä–≤–∞–∫ –≤–ø–∞–≤!",
            "–ë–ª—è, –Ω–µ –ø—Ä–∞—Ü—é—î —Ü—è —Ö—É–π–Ω—è. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.",
            "–®–æ—Å—å –ø—ñ—à–ª–æ –ø–æ –ø—ñ–∑–¥—ñ. –î–∞–≤–∞–π –ø—ñ–∑–Ω—ñ—à–µ."
        ])

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É –ø—ñ–¥ –ø'—è–Ω—É –ª—é–¥–∏–Ω—É
def drunk_text_modifications(text):
    # –ü'—è–Ω—ñ –ª—é–¥–∏ —Ä–æ–±–ª—è—Ç—å –ø–æ–º–∏–ª–∫–∏ - –∑–∞–º—ñ–Ω—é—î–º–æ –¥–µ—è–∫—ñ –ª—ñ—Ç–µ—Ä–∏
    replacements = {
        '–∞': '–∞',
        '–æ': '–æ',
        '–µ': '–µ',
        '–∏': '–∏',
        '—ñ': '—ñ'
    }
    
    # –®–∞–Ω—Å –Ω–∞ –ø–æ–º–∏–ª–∫—É –≤ —Å–ª–æ–≤—ñ
    error_chance = 0.2
    
    words = text.split()
    result = []
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ
    for word in words:
        # –®–∞–Ω—Å –∑—Ä–æ–±–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É –≤ —Å–ª–æ–≤—ñ
        if len(word) > 3 and random.random() < error_chance:
            char_list = list(word)
            # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            pos = random.randint(1, len(char_list) - 1)
            if char_list[pos].lower() in replacements:
                # –í–∏–¥–∞–ª—è—î–º–æ –∞–±–æ –¥—É–±–ª—é—î–º–æ –ª—ñ—Ç–µ—Ä—É
                if random.random() < 0.5:
                    char_list.pop(pos)
                else:
                    char_list.insert(pos, char_list[pos])
            word = ''.join(char_list)
        result.append(word)
    
    modified_text = ' '.join(result)
    
    # –ü'—è–Ω—ñ –ª—é–¥–∏ —á–∞—Å—Ç–æ –¥–æ–¥–∞—é—Ç—å –∑–∞–π–≤—ñ –≤–∏–≥—É–∫–∏ —Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
    drunk_phrases = ["–±–ª—ñ–Ω", "–æ—Ç –±–ª—ñ–Ω", "–Ω—É —Ç–∏–∏–∏", "–∫–∞–ø–µ—Ü—å", "—è –∫–∞–∂—É —Ç–æ–±—ñ", "–Ω—É", "–æ—Ç", "—Ñ—É—É—Ö", "—Å–ª—É—Ö–∞–π"]
    
    # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ø'—è–Ω—ñ –≤–∏–≥—É–∫–∏ –∑ –ø–µ–≤–Ω–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é
    if random.random() < 0.4:
        insert_pos = random.randint(0, len(result))
        result.insert(insert_pos, random.choice(drunk_phrases))
    
    # –®–∞–Ω—Å–∏ –Ω–∞ –∑–º—ñ–Ω—É –Ω–∞—Å—Ç—Ä–æ—é –ø–æ—Å–µ—Ä–µ–¥ —Ä–µ—á–µ–Ω–Ω—è
    if random.random() < 0.3:
        mood_changes = [
            "...–∞ –≤–∑–∞–≥–∞–ª—ñ –¥—É–∂–µ —Å—É–º–Ω–æ —Ü–µ –≤—Å–µ", 
            "...—Ö–æ—á–∞ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ —è —Ç–µ–±–µ –æ–±–æ–∂–Ω—é—é!",
            "...–∑–∞–±–∏–π, –º–µ–Ω—ñ –≤–∂–µ –≤—Å–µ –æ–¥–Ω–æ",
            "...—Å—Ç–æ–ø, –∞ –º–∏ –ø—Ä–æ —â–æ –≥–æ–≤–æ—Ä–∏–ª–∏?",
            "...–°–¢–û–ü–ü–ü–ü, —è —â–æ—Å—å –Ω–µ —Ç—É–¥–∏ –ø–∏—à—É..."
        ]
        modified_text += random.choice(mood_changes)
    
    return modified_text

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.message.from_user
    message = update.message.text
    await update_user_profile(user)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    is_direct_mention = "–¥–∞—Ä–∏–Ω–∞" in message.lower()
    is_reply_to_bot = (
        update.message.reply_to_message
        and update.message.reply_to_message.from_user.id == context.bot.id
    )
    
    # –®–∞–Ω—Å –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –≤—Ç—Ä—É—á–∞–Ω–Ω—è - –∑–±—ñ–ª—å—à—É—î–º–æ –¥–æ 0.001%
    random_intervention = random.random() < 0.00001
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞
    replied_text = ""
    replied_user = None
    
    if update.message.reply_to_message and update.message.reply_to_message.text:
        replied_text = update.message.reply_to_message.text
        replied_user = update.message.reply_to_message.from_user.username or update.message.reply_to_message.from_user.first_name

    # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
    chat_history.append({
        "timestamp": datetime.now(),
        "message": message,
        "user_id": user.id,
        "username": user.username,
        "display_name": USERS_INFO.get(user.username, {}).get("name", user.first_name),
    })

    if len(chat_history) > 30:
        chat_history.pop(0)

    # –¢–ï–ü–ï–† –í–ò–ó–ù–ê–ß–ê–Ñ–ú–û –ß–ò –ë–£–î–ï –ë–û–¢ –í–Ü–î–ü–û–í–Ü–î–ê–¢–ò
    should_respond = False
    reply_to_message_id = update.message.message_id  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    # 1. –Ø–∫—â–æ –ø—Ä—è–º–∞ –∑–≥–∞–¥–∫–∞ –∞–±–æ —Ä–µ–ø–ª–∞–π –Ω–∞ –±–æ—Ç–∞ - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ
    if is_direct_mention or is_reply_to_bot:
        should_respond = True
    
    # 2. –í–∏–ø–∞–¥–∫–æ–≤–µ –≤—Ç—Ä—É—á–∞–Ω–Ω—è - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –ù–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –Ü–ù–®–û–ì–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê
    elif random_intervention and not update.message.reply_to_message:
        should_respond = True
        logging.info("Random intervention triggered!")
        
    # –Ø–∫—â–æ —Ç—Ä–µ–±–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏
    if should_respond:
        await context.bot.send_chat_action(update.effective_chat.id, action="typing")
        
        # –Ø–∫—â–æ —Ü–µ —Ä—ñ–¥–∫—ñ—Å–Ω–µ –≤—Ç—Ä—É—á–∞–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if random_intervention:
            context_messages = [{
                "role": "user",
                "message": "–î–∞–π –∫–æ—Ä–æ—Ç–∫—É —Ç–æ–∫—Å–∏—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ",
                "username": user.username
            }]
        else:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–æ 5 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ä–æ–∑–º–æ–≤–∏
            context_messages = [
                {
                    "role": "assistant" if msg.get("is_bot") else "user",
                    "message": msg["message"],
                    "username": msg.get("username", "")
                }
                for msg in chat_history[-5:]
            ]
            
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏
        special_instruction = ""
        
        # –Ø–∫—â–æ —î reply –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –±–æ—Ç –ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ (–∑–≥–∞–¥–∫–∞ –∞–±–æ reply –¥–æ –±–æ—Ç–∞)
        if replied_text and (is_direct_mention or is_reply_to_bot):
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è
            is_summarize_request = any(word in message.lower() for word in ["—Å–∫–æ—Ä–æ—Ç–∏", "—Å–∫–æ—Ä–æ—á–µ–Ω–æ", "—Ä–µ–∑—é–º–µ", "—Å—É—Ç—å", "–ø—ñ–¥—Å—É–º—É–π"])
            
            # –î–æ–¥–∞—î–º–æ –æ—Å–æ–±–ª–∏–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∑–∞–ø–∏—Ç—É
            if is_summarize_request:
                special_instruction = f"\n\n–í–ê–ñ–õ–ò–í–û! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{replied_user}: \"{replied_text}\". –ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–µ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è –¥–æ 1-2 —Ä–µ—á–µ–Ω—å."
            else:
                # –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —â–æ–¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                special_instruction = f"\n\n–í–ê–ñ–õ–ò–í–û! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{replied_user}: \"{replied_text}\". –í–∏–∫–æ–Ω–∞–π —Ç–µ, —â–æ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–æ–¥–æ —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ –¥–∞–π –ö–û–†–û–¢–ö–£ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
            
        response = await generate_response(context_messages, special_instruction)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        if not response or len(response.strip()) < 2:
            response = "–ë–ª—è, —â–æ—Å—å —è –∑–∞—Ç—É–ø–∏–ª–∞. –î–∞–≤–∞–π —â–µ —Ä–∞–∑ —Å–ø–∏—Ç–∞–π."
            
        chat_history.append({
            "timestamp": datetime.now(),
            "message": response,
            "is_bot": True
        })
        
        try:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å
            await update.message.reply_text(response, reply_to_message_id=reply_to_message_id)
        except Exception as e:
            # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –Ω–µ —á–µ—Ä–µ–∑ –¥–æ–≤–∂–∏–Ω—É, —Å–ø—Ä–æ–±—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")
            await update.message.reply_text("–ô–æ–±****, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", reply_to_message_id=reply_to_message_id)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ô–æ—É, —à–æ —Ç—Ä–µ–±–∞? üòé")

async def set_role_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–¢–æ–∫—Å–∏—á–Ω–∏–π —Ä–µ–∂–∏–º", callback_data="toxic"),
         InlineKeyboardButton("–ü'—è–Ω–∏–π —Ä–µ–∂–∏–º", callback_data="drunk")],
        [InlineKeyboardButton("–°–∫–∏–Ω—É—Ç–∏ –¥–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ—ó —Ä–æ–ª—ñ", callback_data="default")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–∏—Ä–∞–π —Ä–µ–∂–∏–º –î–∞—Ä–∏–Ω–∏:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CURRENT_ROLE
    
    query = update.callback_query
    await query.answer()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω—É —Ä–æ–ª—å
    selected_role = query.data
    CURRENT_ROLE = selected_role
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ
    role_descriptions = {
        "default": "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–∞—Ä–∫–∞–∑–º",
        "toxic": "—Ç–æ–∫—Å–∏—á–Ω–∏–π —Ä–µ–∂–∏–º",
        "drunk": "–ø'—è–Ω–∏–π —Ä–µ–∂–∏–º"
    }
    
    role_name = role_descriptions.get(selected_role, selected_role)
    response_message = f"–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{role_name}' üí•"
    
    await query.edit_message_text(text=response_message)
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –Ω–æ–≤—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É
    role_intros = {
        "default": "–ù—É —à–æ, –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–∞ –î–∞—Ä–∏–Ω–∞.",
        "toxic": "–í–Ü–î–°–¨–û–ì–û–î–ù–Ü –Ø –ë–£–î–£ –ü–†–û–°–¢–û –ó–ù–ò–©–£–í–ê–¢–ò –í–ê–°, –ü–Ü–î–ê–†–ê–°–ò!!!",
        "drunk": "–û–ø–∞-–æ–ø–∞... —à–æ? –ê, –ø—Ä–∏–≤—ñ—ñ—ñ—ñ—Ç... —è —Ç—É—Ç, –Ω—É... —Ç—Ä–æ—à–∫ –≤–∏–ø–∏–ª–∞, –Ω—É —Ç–∏ –ø–æ–Ω—è–≤..."
    }
    
    if selected_role in role_intros:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=role_intros[selected_role])

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(context.error, Conflict):
        logging.critical("–ö–æ–Ω—Ñ–ª—ñ–∫—Ç –∑–∞–ø–∏—Ç—ñ–≤! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await asyncio.sleep(5)
        await context.application.stop()
        await context.application.initialize()
        await context.application.start()
    else:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {context.error}")

# –ó–∞–º—ñ–Ω—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ –ø—Ä–æ—Å—Ç—É –æ—Ü—ñ–Ω–∫—É
def estimate_tokens(messages):
    # –ì—Ä—É–±–∞ –æ—Ü—ñ–Ω–∫–∞: –ø—Ä–∏–±–ª–∏–∑–Ω–æ 4 —Ç–æ–∫–µ–Ω–∏ –Ω–∞ —Å–ª–æ–≤–æ
    total_words = 0
    for message in messages:
        if "content" in message:
            total_words += len(message["content"].split())
    return total_words * 4

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
def prune_old_messages(messages, max_tokens=8000):
    while estimate_tokens(messages) > max_tokens and len(messages) > 3:
        messages.pop(0)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
async def get_available_models():
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
        req = urllib.request.Request(
            "https://openrouter.ai/api/v1/models",
            headers=headers,
            method="GET"
        )
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
        loop = asyncio.get_event_loop()
        response_data = await loop.run_in_executor(None, lambda: urllib.request.urlopen(req).read().decode('utf-8'))
        
        # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        result = json.loads(response_data)
        
        # –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        for model in result.get("data", []):
            logging.info(f"Available model: {model.get('id')}")
        
        return result.get("data", [])
        
    except Exception as e:
        logging.error(f"Error getting models: {str(e)}")
        return []

# –î–æ–¥–∞—î–º–æ –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
async def on_startup(application):
    await get_available_models()

def main():
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram").setLevel(logging.WARNING)
    
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO  # –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ WARNING –¥–ª—è —â–µ –º–µ–Ω—à–∏—Ö –ª–æ–≥—ñ–≤
    )

    application = Application.builder().token(TOKEN).build()
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set", set_role_buttons))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )
    main()
