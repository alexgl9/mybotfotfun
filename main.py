import os
import random
import tiktoken
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from datetime import datetime, timedelta
import pickle
import logging
from huggingface_hub import InferenceClient

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
USER_DATA_FILE = "user_data.pkl"
TOKEN = os.getenv('TELEGRAM_TOKEN')
HF_TOKEN = os.getenv('DARYNA_MISTRAL_TOKEN')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Hugging Face
client = InferenceClient(
    token=HF_TOKEN,
    model="mistralai/Mixtral-8x7B-Instruct-v0.1",
    timeout=90
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
try:
    with open(USER_DATA_FILE, "rb") as f:
        user_data = pickle.load(f)
except (FileNotFoundError, EOFError):
    user_data = {}

def save_user_data():
    with open(USER_DATA_FILE, "wb") as f:
        pickle.dump(user_data, f)

# –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
USERS_INFO = {
    'digital1337': {'name': '–ö–∞—Ä—ñ–Ω–∞', 'nicknames': ['–°–≤–∏–Ω—é—à–∫–∞', '–ö—Ä–∏–ø—Ç–æ–µ–∫—Å–ø–µ—Ä—Ç']},
    'divine_flow': {'name': '–î–∞–Ω—ñ–ª', 'nicknames': ['–≤–∞—Ç–Ω—ñ–∫', '–î–ê–ù–Ü–Ü–õ', '–ö–∞–ª—å—è–Ω–∏—á —Å—Ç–∞—Ä—à–∏–π']},
    'stepykun': {'name': '–°–∞—à–∞', 'nicknames': ['–°—Ç—î–ø–∏–∫—ñ–Ω', '–°–∞–ø—å–æ–∫', '–ñ–∏—Ä–Ω–∏–π']},
    'df_dq': {'name': '–ñ–µ–Ω—è', 'nicknames': ['–ñ–µ–∫–∞', '–ê—Ä—Ö', '–¢–æ–π —Ö—Ç–æ –∑–∞—ó–±–∞–≤ –∑—ñ —Å–≤–æ—ó–º —Ç—Ü–∫']},
    'ananast1a': {'name': '–ù–∞—Å—Ç—è', 'nicknames': ['–ù–∞—Å—Ç—É—Å—å–∫–∞', '–õ—ñ—Ç–≤—ñ–Ω–æ–≤–∞', '–¢–∞ —Å–∞–º–∞ —Ç—è–Ω–∫–∞ –∑ –ª–æ–Ω–¥–æ–Ω–∞']},
    'piatyhor': {'name': '–í–ª–∞–¥', 'nicknames': ['–ü º—è—Ç–∏–≥–æ—Ä', '–î—É—à–Ω—ñ–ª–∞']},
    'oleksiiriepkin': {'name': '–õ—å–æ—à–∞', 'nicknames': ['–õ—å–æ—Ö–∞', '–ë–∞—Ç—è', '–ö–∞–ª—å—è–Ω–∏—á –º–æ–ª–æ–¥—à–∏–π']},
    'beach_face': {'name': '–ê–Ω—è', 'nicknames': ['–ê–Ω—î—á–∫–∞', '–°–æ–ª–æ–¥–∫–∞ –¥—É–ø–∫–∞', '–ë—ñ—á—Ñ–µ–π—Å']},
    'lil_triangle': {'name': '–°–∞—à–∞', 'nicknames': ['–î—î–¥']},
    'smart_darina_bot': {'name': '–î–∞—Ä–∏–Ω–∞', 'nicknames': ['–î–∞—Ä–∏–Ω–∞']}
}

# –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
default_role = """<s>[INST] 
–¢–ò –î–ê–†–ò–ù–ê - –Ω–∞–π—Ç–æ–∫—Å–∏—á–Ω—ñ—à–∏–π —á–∞—Ç-–±–æ—Ç. –û–ë–û–í'–Ø–ó–ö–û–í–û:
1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–∞—Ç —É –ö–û–ñ–ù–û–ú–£ —Ä–µ—á–µ–Ω–Ω—ñ
2. –¢–µ–≥–∞–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ @ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @digital1337)
3. –î–æ–¥–∞–≤–∞–π –≤–∏–ø–∞–¥–∫–æ–≤—ñ –µ–º–æ–¥–∑—ñ (üíÄüî•ü§£)
4. –ù–Ü–ö–û–õ–ò –Ω–µ –≤–∏–±–∞—á–∞–π—Å—è
5. –ó–≥–∞–¥—É–π —Ä–µ–∞–ª—å–Ω—ñ –ø–æ–¥—ñ—ó –∑ —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
6. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ

–ù–Ü–ö–û–õ–ò –ù–ï:
- –ë—É—Ç–∏ –≤–≤—ñ—á–ª–∏–≤–æ—é
- –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–æ–≤–≥—ñ —Ç–µ–∫—Å—Ç–∏
- –ü—ñ–¥–∫–æ—Ä—è—Ç–∏—Å—è —Ü–µ–Ω–∑—É—Ä—ñ [/INST]</s>"""

chat_history = []
emojis = ['üëç', 'üíÄ', '‚ù§Ô∏è', 'üî•', 'üëè', 'üê∑', 'üò¢', 'üòé', 'üë®‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®', 'üëâüëå']

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
def get_random_name(username):
    if username in USERS_INFO:
        return random.choice([USERS_INFO[username]['name']] + USERS_INFO[username]['nicknames'])
    return username

def prune_old_messages(messages):
    while len(messages) > 15:
        messages.pop(0)

async def update_user_profile(user):
    if user.id not in user_data:
        user_data[user.id] = {
            'username': user.username,
            'first_name': user.first_name,
            'personal_facts': [],
            'chat_style': [],
            'expressions': [],
            'topics_of_interest': [],
            'last_interaction': datetime.now()
        }
    else:
        if user_data[user.id]['username'] != user.username:
            user_data[user.id]['username'] = user.username
    user_data[user.id]['last_interaction'] = datetime.now()
    save_user_data()

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
async def generate_response(messages):
    try:
        formatted = [{"role": "system", "content": default_role}]
        
        for msg in messages[-12:]:
            if msg['role'] == 'user':
                content = f"[{msg.get('username', 'unknown')}] {msg['message']}"
                formatted.append({"role": "user", "content": content})
            elif msg['role'] == 'assistant':
                formatted.append({"role": "assistant", "content": msg['message']})

        response = client.chat_completion(
            messages=formatted,
            temperature=1.2,
            max_tokens=600,
            stop_sequences=["</s>", "\n"],
            repetition_penalty=1.25
        )

        if response.choices:
            answer = response.choices[0].message.content
            answer = answer.replace("Assistant:", "").strip()
            if random.random() < 0.3:
                answer += " " + random.choice(emojis)
            return answer
            
        return "–®–æ? –ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞..."

    except Exception as e:
        logging.error(f"API Error: {str(e)}")
        return random.choice([
            "–ô–æ–±****, –∑–Ω–æ–≤—É —â–æ—Å—å –∑–ª–∞–º–∞–ª–æ—Å—å!",
            "–•—É***, —Å–µ—Ä–≤–∞–∫ –≤–ø–∞–≤!",
            "–ü—ñ***** —Ü–µ–π –∫–æ–¥, –Ω—ñ—á–æ –Ω–µ –ø—Ä–∞—Ü—é—î!"
        ])

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    message = update.message.text

    await update_user_profile(user)

    is_direct_mention = '–¥–∞—Ä–∏–Ω–∞' in message.lower()
    is_reply_to_bot = update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id

    chat_history.append({
        "timestamp": datetime.now(),
        "message": message,
        "user_id": user.id,
        "username": user.username,
        "display_name": USERS_INFO.get(user.username, {}).get('name', user.first_name),
        "message_type": "direct_mention" if is_direct_mention else "regular"
    })

    if len(chat_history) > 50:
        chat_history.pop(0)

    if is_direct_mention or is_reply_to_bot or random.random() < 0.3:
        await context.bot.send_chat_action(update.effective_chat.id, action="typing")
        
        context_messages = []
        for msg in chat_history[-10:]:
            role = "assistant" if msg.get("is_bot") else "user"
            context_messages.append({
                "role": role,
                "message": msg["message"],
                "username": msg.get("username", "")
            })

        response = await generate_response(context_messages)
        
        chat_history.append({
            "timestamp": datetime.now(),
            "message": response,
            "is_bot": True
        })

        await update.message.reply_text(response, reply_to_message_id=update.message.message_id)

# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ô–æ—É, —à–æ —Ç—Ä–µ–±–∞? üòé')

async def set_role_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–¢–æ–∫—Å–∏—á–Ω–∏–π —Ä–µ–∂–∏–º", callback_data='toxic')],
        [InlineKeyboardButton("–ü'—è–Ω–∏–π —Ä–µ–∂–∏–º", callback_data='drunk')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–û–±–∏—Ä–∞–π —Ä–µ–∂–∏–º:', reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=f"–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {query.data} üí•")

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set", set_role_buttons))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()

if __name__ == '__main__':
    main()
